
test_blue_pill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000376c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ef0  08003878  08003878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005768  08005768  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005768  08005768  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005768  08005768  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005768  08005768  00015768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  20000060  080057d0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  080057d0  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ebf1  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f42  00000000  00000000  0002ecbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  00030c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c16  00000000  00000000  00031b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017fda  00000000  00000000  00032756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c38  00000000  00000000  0004a730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cb4a  00000000  00000000  0005c368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000462c  00000000  00000000  000e8eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ed4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003860 	.word	0x08003860

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003860 	.word	0x08003860

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <OLED_ClearBuffer>:
static uint8_t oled_buffer[1024];			// Display buffer
static I2C_HandleTypeDef* hi2c;				// Pointer I2C structure

/* private: */
void OLED_ClearBuffer(uint8_t value)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 8000166:	2300      	movs	r3, #0
 8000168:	81fb      	strh	r3, [r7, #14]
 800016a:	e006      	b.n	800017a <OLED_ClearBuffer+0x1e>
	{
		oled_buffer[i] = value;
 800016c:	89fb      	ldrh	r3, [r7, #14]
 800016e:	4908      	ldr	r1, [pc, #32]	; (8000190 <OLED_ClearBuffer+0x34>)
 8000170:	79fa      	ldrb	r2, [r7, #7]
 8000172:	54ca      	strb	r2, [r1, r3]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 8000174:	89fb      	ldrh	r3, [r7, #14]
 8000176:	3301      	adds	r3, #1
 8000178:	81fb      	strh	r3, [r7, #14]
 800017a:	89fb      	ldrh	r3, [r7, #14]
 800017c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000180:	d3f4      	bcc.n	800016c <OLED_ClearBuffer+0x10>
	}
}
 8000182:	bf00      	nop
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	2000007c 	.word	0x2000007c

08000194 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b086      	sub	sp, #24
 8000198:	af02      	add	r7, sp, #8
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2] = {0x00, command};
 800019e:	2300      	movs	r3, #0
 80001a0:	733b      	strb	r3, [r7, #12]
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, OLED_ADDRESS, dt, 2, 10);
 80001a6:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <OLED_SendCommand+0x30>)
 80001a8:	6818      	ldr	r0, [r3, #0]
 80001aa:	f107 020c 	add.w	r2, r7, #12
 80001ae:	230a      	movs	r3, #10
 80001b0:	9300      	str	r3, [sp, #0]
 80001b2:	2302      	movs	r3, #2
 80001b4:	2178      	movs	r1, #120	; 0x78
 80001b6:	f001 fa27 	bl	8001608 <HAL_I2C_Master_Transmit>
}
 80001ba:	bf00      	nop
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	2000047c 	.word	0x2000047c

080001c8 <OLED_SendData>:

void OLED_SendData(uint8_t data)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2] = {0x40, data};
 80001d2:	2340      	movs	r3, #64	; 0x40
 80001d4:	733b      	strb	r3, [r7, #12]
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, OLED_ADDRESS, dt, 2, 10);
 80001da:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <OLED_SendData+0x30>)
 80001dc:	6818      	ldr	r0, [r3, #0]
 80001de:	f107 020c 	add.w	r2, r7, #12
 80001e2:	230a      	movs	r3, #10
 80001e4:	9300      	str	r3, [sp, #0]
 80001e6:	2302      	movs	r3, #2
 80001e8:	2178      	movs	r1, #120	; 0x78
 80001ea:	f001 fa0d 	bl	8001608 <HAL_I2C_Master_Transmit>
}
 80001ee:	bf00      	nop
 80001f0:	3710      	adds	r7, #16
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	2000047c 	.word	0x2000047c

080001fc <OLED_Init>:

/* public: */

uint8_t OLED_Init(I2C_HandleTypeDef* i2c_handleTypeDef)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	hi2c = i2c_handleTypeDef;
 8000204:	4a30      	ldr	r2, [pc, #192]	; (80002c8 <OLED_Init+0xcc>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6013      	str	r3, [r2, #0]
	
	if (HAL_I2C_IsDeviceReady(hi2c, OLED_ADDRESS, 10, 100) != HAL_OK)
 800020a:	4b2f      	ldr	r3, [pc, #188]	; (80002c8 <OLED_Init+0xcc>)
 800020c:	6818      	ldr	r0, [r3, #0]
 800020e:	2364      	movs	r3, #100	; 0x64
 8000210:	220a      	movs	r2, #10
 8000212:	2178      	movs	r1, #120	; 0x78
 8000214:	f001 faf6 	bl	8001804 <HAL_I2C_IsDeviceReady>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <OLED_Init+0x26>
	{
		return 0;
 800021e:	2300      	movs	r3, #0
 8000220:	e04e      	b.n	80002c0 <OLED_Init+0xc4>
	}
	
	OLED_SendCommand(OLED_DISPLAY_OFF);
 8000222:	20ae      	movs	r0, #174	; 0xae
 8000224:	f7ff ffb6 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_CLOCK_DIV_RATIO);
 8000228:	20d5      	movs	r0, #213	; 0xd5
 800022a:	f7ff ffb3 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(0x80);
 800022e:	2080      	movs	r0, #128	; 0x80
 8000230:	f7ff ffb0 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_MULTIPLEX_RATIO);
 8000234:	20a8      	movs	r0, #168	; 0xa8
 8000236:	f7ff ffad 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(0x3F);
 800023a:	203f      	movs	r0, #63	; 0x3f
 800023c:	f7ff ffaa 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_OFFSET);
 8000240:	20d3      	movs	r0, #211	; 0xd3
 8000242:	f7ff ffa7 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(0x0);
 8000246:	2000      	movs	r0, #0
 8000248:	f7ff ffa4 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_START_LINE | 0x0);
 800024c:	2040      	movs	r0, #64	; 0x40
 800024e:	f7ff ffa1 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(OLED_CHARGE_PUMP);
 8000252:	208d      	movs	r0, #141	; 0x8d
 8000254:	f7ff ff9e 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(0x14);
 8000258:	2014      	movs	r0, #20
 800025a:	f7ff ff9b 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(OLED_MEMORY_ADDR_MODE);
 800025e:	2020      	movs	r0, #32
 8000260:	f7ff ff98 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(0x00);
 8000264:	2000      	movs	r0, #0
 8000266:	f7ff ff95 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_SEGMENT_REMAP | 0x1);
 800026a:	20a1      	movs	r0, #161	; 0xa1
 800026c:	f7ff ff92 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(OLED_COM_SCAN_DIR_DEC);
 8000270:	20c8      	movs	r0, #200	; 0xc8
 8000272:	f7ff ff8f 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_COM_PINS);
 8000276:	20da      	movs	r0, #218	; 0xda
 8000278:	f7ff ff8c 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(0x12);
 800027c:	2012      	movs	r0, #18
 800027e:	f7ff ff89 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_CONTRAST_CONTROL);
 8000282:	2081      	movs	r0, #129	; 0x81
 8000284:	f7ff ff86 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(0xFF);
 8000288:	20ff      	movs	r0, #255	; 0xff
 800028a:	f7ff ff83 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_PRECHARGE_PERIOD);
 800028e:	20d9      	movs	r0, #217	; 0xd9
 8000290:	f7ff ff80 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(0xF1);
 8000294:	20f1      	movs	r0, #241	; 0xf1
 8000296:	f7ff ff7d 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_VCOM_DESELECT);
 800029a:	20db      	movs	r0, #219	; 0xdb
 800029c:	f7ff ff7a 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(0x40);
 80002a0:	2040      	movs	r0, #64	; 0x40
 80002a2:	f7ff ff77 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ALL_ON_RESUME);
 80002a6:	20a4      	movs	r0, #164	; 0xa4
 80002a8:	f7ff ff74 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(OLED_NORMAL_DISPLAY);
 80002ac:	20a6      	movs	r0, #166	; 0xa6
 80002ae:	f7ff ff71 	bl	8000194 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ON);
 80002b2:	20af      	movs	r0, #175	; 0xaf
 80002b4:	f7ff ff6e 	bl	8000194 <OLED_SendCommand>

	OLED_Clear(0);
 80002b8:	2000      	movs	r0, #0
 80002ba:	f000 f807 	bl	80002cc <OLED_Clear>
	
	return 1;
 80002be:	2301      	movs	r3, #1
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	2000047c 	.word	0x2000047c

080002cc <OLED_Clear>:

void OLED_Clear(uint8_t mode)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
	if (mode) OLED_ClearBuffer(0xFF);
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d003      	beq.n	80002e4 <OLED_Clear+0x18>
 80002dc:	20ff      	movs	r0, #255	; 0xff
 80002de:	f7ff ff3d 	bl	800015c <OLED_ClearBuffer>
	else      OLED_ClearBuffer(0x00);
}
 80002e2:	e002      	b.n	80002ea <OLED_Clear+0x1e>
	else      OLED_ClearBuffer(0x00);
 80002e4:	2000      	movs	r0, #0
 80002e6:	f7ff ff39 	bl	800015c <OLED_ClearBuffer>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <OLED_DrawPixelStatus>:
		}
	}
}

void OLED_DrawPixelStatus(uint8_t pos_x, uint8_t pos_y, uint8_t mode)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
 80002fe:	460b      	mov	r3, r1
 8000300:	71bb      	strb	r3, [r7, #6]
 8000302:	4613      	mov	r3, r2
 8000304:	717b      	strb	r3, [r7, #5]
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	2b00      	cmp	r3, #0
 800030c:	db3d      	blt.n	800038a <OLED_DrawPixelStatus+0x96>
 800030e:	79bb      	ldrb	r3, [r7, #6]
 8000310:	2b3f      	cmp	r3, #63	; 0x3f
 8000312:	d83a      	bhi.n	800038a <OLED_DrawPixelStatus+0x96>
	
	if (mode)	oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] |= (1 << (pos_y & 7));
 8000314:	797b      	ldrb	r3, [r7, #5]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d01a      	beq.n	8000350 <OLED_DrawPixelStatus+0x5c>
 800031a:	79fa      	ldrb	r2, [r7, #7]
 800031c:	79bb      	ldrb	r3, [r7, #6]
 800031e:	08db      	lsrs	r3, r3, #3
 8000320:	b2d8      	uxtb	r0, r3
 8000322:	4603      	mov	r3, r0
 8000324:	01db      	lsls	r3, r3, #7
 8000326:	4413      	add	r3, r2
 8000328:	4a1a      	ldr	r2, [pc, #104]	; (8000394 <OLED_DrawPixelStatus+0xa0>)
 800032a:	5cd3      	ldrb	r3, [r2, r3]
 800032c:	b25a      	sxtb	r2, r3
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	f003 0307 	and.w	r3, r3, #7
 8000334:	2101      	movs	r1, #1
 8000336:	fa01 f303 	lsl.w	r3, r1, r3
 800033a:	b25b      	sxtb	r3, r3
 800033c:	4313      	orrs	r3, r2
 800033e:	b259      	sxtb	r1, r3
 8000340:	79fa      	ldrb	r2, [r7, #7]
 8000342:	4603      	mov	r3, r0
 8000344:	01db      	lsls	r3, r3, #7
 8000346:	4413      	add	r3, r2
 8000348:	b2c9      	uxtb	r1, r1
 800034a:	4a12      	ldr	r2, [pc, #72]	; (8000394 <OLED_DrawPixelStatus+0xa0>)
 800034c:	54d1      	strb	r1, [r2, r3]
 800034e:	e01d      	b.n	800038c <OLED_DrawPixelStatus+0x98>
	else		oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] &= ~(1 << (pos_y & 7));
 8000350:	79fa      	ldrb	r2, [r7, #7]
 8000352:	79bb      	ldrb	r3, [r7, #6]
 8000354:	08db      	lsrs	r3, r3, #3
 8000356:	b2d8      	uxtb	r0, r3
 8000358:	4603      	mov	r3, r0
 800035a:	01db      	lsls	r3, r3, #7
 800035c:	4413      	add	r3, r2
 800035e:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <OLED_DrawPixelStatus+0xa0>)
 8000360:	5cd3      	ldrb	r3, [r2, r3]
 8000362:	b25a      	sxtb	r2, r3
 8000364:	79bb      	ldrb	r3, [r7, #6]
 8000366:	f003 0307 	and.w	r3, r3, #7
 800036a:	2101      	movs	r1, #1
 800036c:	fa01 f303 	lsl.w	r3, r1, r3
 8000370:	b25b      	sxtb	r3, r3
 8000372:	43db      	mvns	r3, r3
 8000374:	b25b      	sxtb	r3, r3
 8000376:	4013      	ands	r3, r2
 8000378:	b259      	sxtb	r1, r3
 800037a:	79fa      	ldrb	r2, [r7, #7]
 800037c:	4603      	mov	r3, r0
 800037e:	01db      	lsls	r3, r3, #7
 8000380:	4413      	add	r3, r2
 8000382:	b2c9      	uxtb	r1, r1
 8000384:	4a03      	ldr	r2, [pc, #12]	; (8000394 <OLED_DrawPixelStatus+0xa0>)
 8000386:	54d1      	strb	r1, [r2, r3]
 8000388:	e000      	b.n	800038c <OLED_DrawPixelStatus+0x98>
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 800038a:	bf00      	nop
}
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	2000007c 	.word	0x2000007c

08000398 <OLED_GetWidthStr>:
		}
	}
}

uint8_t OLED_GetWidthStr(const char* str)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	uint8_t stl = strlen(str);
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f7ff fed3 	bl	800014c <strlen>
 80003a6:	4603      	mov	r3, r0
 80003a8:	737b      	strb	r3, [r7, #13]
	uint8_t len = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < stl; i++, *str++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	73bb      	strb	r3, [r7, #14]
 80003b2:	e01a      	b.n	80003ea <OLED_GetWidthStr+0x52>
	{
		len += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 80003b4:	4b11      	ldr	r3, [pc, #68]	; (80003fc <OLED_GetWidthStr+0x64>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <OLED_GetWidthStr+0x64>)
 80003ba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80003be:	4619      	mov	r1, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	4618      	mov	r0, r3
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <OLED_GetWidthStr+0x64>)
 80003c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80003cc:	1ac3      	subs	r3, r0, r3
 80003ce:	fb01 f303 	mul.w	r3, r1, r3
 80003d2:	3304      	adds	r3, #4
 80003d4:	4413      	add	r3, r2
 80003d6:	781a      	ldrb	r2, [r3, #0]
 80003d8:	7bfb      	ldrb	r3, [r7, #15]
 80003da:	4413      	add	r3, r2
 80003dc:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < stl; i++, *str++)
 80003de:	7bbb      	ldrb	r3, [r7, #14]
 80003e0:	3301      	adds	r3, #1
 80003e2:	73bb      	strb	r3, [r7, #14]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	3301      	adds	r3, #1
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	7bba      	ldrb	r2, [r7, #14]
 80003ec:	7b7b      	ldrb	r3, [r7, #13]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d3e0      	bcc.n	80003b4 <OLED_GetWidthStr+0x1c>
	}

	return len;
 80003f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000480 	.word	0x20000480

08000400 <OLED_DrawChar>:

	return OLED_GetWidthStr(buf);
}

void OLED_DrawChar(char c, uint8_t ix, uint8_t iy, uint8_t mode)
{
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	4604      	mov	r4, r0
 8000408:	4608      	mov	r0, r1
 800040a:	4611      	mov	r1, r2
 800040c:	461a      	mov	r2, r3
 800040e:	4623      	mov	r3, r4
 8000410:	71fb      	strb	r3, [r7, #7]
 8000412:	4603      	mov	r3, r0
 8000414:	71bb      	strb	r3, [r7, #6]
 8000416:	460b      	mov	r3, r1
 8000418:	717b      	strb	r3, [r7, #5]
 800041a:	4613      	mov	r3, r2
 800041c:	713b      	strb	r3, [r7, #4]
	const uint8_t* symbol = &fontbyte(Font.numchars * (c - Font.offset) + 4);
 800041e:	4b37      	ldr	r3, [pc, #220]	; (80004fc <OLED_DrawChar+0xfc>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	4b36      	ldr	r3, [pc, #216]	; (80004fc <OLED_DrawChar+0xfc>)
 8000424:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000428:	4618      	mov	r0, r3
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	4933      	ldr	r1, [pc, #204]	; (80004fc <OLED_DrawChar+0xfc>)
 800042e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8000432:	1a5b      	subs	r3, r3, r1
 8000434:	fb00 f303 	mul.w	r3, r0, r3
 8000438:	3304      	adds	r3, #4
 800043a:	4413      	add	r3, r2
 800043c:	60bb      	str	r3, [r7, #8]

	for (uint8_t x = 0; x < symbol[0]; x++)
 800043e:	2300      	movs	r3, #0
 8000440:	73fb      	strb	r3, [r7, #15]
 8000442:	e050      	b.n	80004e6 <OLED_DrawChar+0xe6>
	{
		for (uint8_t y = 0; y < Font.height; y++)
 8000444:	2300      	movs	r3, #0
 8000446:	73bb      	strb	r3, [r7, #14]
 8000448:	e044      	b.n	80004d4 <OLED_DrawChar+0xd4>
		{
			if (symbol[1 + y / 8 + x * (Font.numchars - 1) / Font.width] & (0x01 << (y % 8)))
 800044a:	7bbb      	ldrb	r3, [r7, #14]
 800044c:	08db      	lsrs	r3, r3, #3
 800044e:	b2db      	uxtb	r3, r3
 8000450:	1c5a      	adds	r2, r3, #1
 8000452:	7bfb      	ldrb	r3, [r7, #15]
 8000454:	4929      	ldr	r1, [pc, #164]	; (80004fc <OLED_DrawChar+0xfc>)
 8000456:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800045a:	3901      	subs	r1, #1
 800045c:	fb01 f303 	mul.w	r3, r1, r3
 8000460:	4926      	ldr	r1, [pc, #152]	; (80004fc <OLED_DrawChar+0xfc>)
 8000462:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8000466:	fb93 f3f1 	sdiv	r3, r3, r1
 800046a:	4413      	add	r3, r2
 800046c:	461a      	mov	r2, r3
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	4413      	add	r3, r2
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	461a      	mov	r2, r3
 8000476:	7bbb      	ldrb	r3, [r7, #14]
 8000478:	f003 0307 	and.w	r3, r3, #7
 800047c:	fa42 f303 	asr.w	r3, r2, r3
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	2b00      	cmp	r3, #0
 8000486:	d011      	beq.n	80004ac <OLED_DrawChar+0xac>
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 1 : 0);
 8000488:	79ba      	ldrb	r2, [r7, #6]
 800048a:	7bfb      	ldrb	r3, [r7, #15]
 800048c:	4413      	add	r3, r2
 800048e:	b2d8      	uxtb	r0, r3
 8000490:	797a      	ldrb	r2, [r7, #5]
 8000492:	7bbb      	ldrb	r3, [r7, #14]
 8000494:	4413      	add	r3, r2
 8000496:	b2d9      	uxtb	r1, r3
 8000498:	793b      	ldrb	r3, [r7, #4]
 800049a:	2b00      	cmp	r3, #0
 800049c:	bf14      	ite	ne
 800049e:	2301      	movne	r3, #1
 80004a0:	2300      	moveq	r3, #0
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	461a      	mov	r2, r3
 80004a6:	f7ff ff25 	bl	80002f4 <OLED_DrawPixelStatus>
 80004aa:	e010      	b.n	80004ce <OLED_DrawChar+0xce>
			else
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 0 : 1);
 80004ac:	79ba      	ldrb	r2, [r7, #6]
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	4413      	add	r3, r2
 80004b2:	b2d8      	uxtb	r0, r3
 80004b4:	797a      	ldrb	r2, [r7, #5]
 80004b6:	7bbb      	ldrb	r3, [r7, #14]
 80004b8:	4413      	add	r3, r2
 80004ba:	b2d9      	uxtb	r1, r3
 80004bc:	793b      	ldrb	r3, [r7, #4]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	bf0c      	ite	eq
 80004c2:	2301      	moveq	r3, #1
 80004c4:	2300      	movne	r3, #0
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	461a      	mov	r2, r3
 80004ca:	f7ff ff13 	bl	80002f4 <OLED_DrawPixelStatus>
		for (uint8_t y = 0; y < Font.height; y++)
 80004ce:	7bbb      	ldrb	r3, [r7, #14]
 80004d0:	3301      	adds	r3, #1
 80004d2:	73bb      	strb	r3, [r7, #14]
 80004d4:	7bbb      	ldrb	r3, [r7, #14]
 80004d6:	4a09      	ldr	r2, [pc, #36]	; (80004fc <OLED_DrawChar+0xfc>)
 80004d8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80004dc:	4293      	cmp	r3, r2
 80004de:	dbb4      	blt.n	800044a <OLED_DrawChar+0x4a>
	for (uint8_t x = 0; x < symbol[0]; x++)
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	3301      	adds	r3, #1
 80004e4:	73fb      	strb	r3, [r7, #15]
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	7bfa      	ldrb	r2, [r7, #15]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d3a9      	bcc.n	8000444 <OLED_DrawChar+0x44>
		}
	}
}
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd90      	pop	{r4, r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000480 	.word	0x20000480

08000500 <OLED_DrawNum>:

void OLED_DrawNum(int16_t num, uint8_t x, uint8_t y, uint8_t mode)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b087      	sub	sp, #28
 8000504:	af00      	add	r7, sp, #0
 8000506:	4604      	mov	r4, r0
 8000508:	4608      	mov	r0, r1
 800050a:	4611      	mov	r1, r2
 800050c:	461a      	mov	r2, r3
 800050e:	4623      	mov	r3, r4
 8000510:	80fb      	strh	r3, [r7, #6]
 8000512:	4603      	mov	r3, r0
 8000514:	717b      	strb	r3, [r7, #5]
 8000516:	460b      	mov	r3, r1
 8000518:	713b      	strb	r3, [r7, #4]
 800051a:	4613      	mov	r3, r2
 800051c:	70fb      	strb	r3, [r7, #3]
	char buf[15];
	sprintf(buf, "%d", num);
 800051e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000522:	f107 0308 	add.w	r3, r7, #8
 8000526:	4907      	ldr	r1, [pc, #28]	; (8000544 <OLED_DrawNum+0x44>)
 8000528:	4618      	mov	r0, r3
 800052a:	f002 fce7 	bl	8002efc <siprintf>

	OLED_DrawStr(buf, x, y, mode);
 800052e:	78fb      	ldrb	r3, [r7, #3]
 8000530:	793a      	ldrb	r2, [r7, #4]
 8000532:	7979      	ldrb	r1, [r7, #5]
 8000534:	f107 0008 	add.w	r0, r7, #8
 8000538:	f000 f806 	bl	8000548 <OLED_DrawStr>
}
 800053c:	bf00      	nop
 800053e:	371c      	adds	r7, #28
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}
 8000544:	08003878 	.word	0x08003878

08000548 <OLED_DrawStr>:

void OLED_DrawStr(const char *str, uint8_t x, uint8_t y, uint8_t mode)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	4608      	mov	r0, r1
 8000552:	4611      	mov	r1, r2
 8000554:	461a      	mov	r2, r3
 8000556:	4603      	mov	r3, r0
 8000558:	70fb      	strb	r3, [r7, #3]
 800055a:	460b      	mov	r3, r1
 800055c:	70bb      	strb	r3, [r7, #2]
 800055e:	4613      	mov	r3, r2
 8000560:	707b      	strb	r3, [r7, #1]
	uint8_t stl = strlen(str);
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f7ff fdf2 	bl	800014c <strlen>
 8000568:	4603      	mov	r3, r0
 800056a:	737b      	strb	r3, [r7, #13]
	uint8_t pos = x;
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	73fb      	strb	r3, [r7, #15]

	if (pos == RIGHT) pos = OLED_WIDTH - OLED_GetWidthStr(str) - 1;
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	2bfe      	cmp	r3, #254	; 0xfe
 8000574:	d106      	bne.n	8000584 <OLED_DrawStr+0x3c>
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f7ff ff0e 	bl	8000398 <OLED_GetWidthStr>
 800057c:	4603      	mov	r3, r0
 800057e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000582:	73fb      	strb	r3, [r7, #15]
	if (pos == CENTER) pos = (OLED_WIDTH - OLED_GetWidthStr(str) - 1) / 2;
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	2bff      	cmp	r3, #255	; 0xff
 8000588:	d109      	bne.n	800059e <OLED_DrawStr+0x56>
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f7ff ff04 	bl	8000398 <OLED_GetWidthStr>
 8000590:	4603      	mov	r3, r0
 8000592:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000596:	0fda      	lsrs	r2, r3, #31
 8000598:	4413      	add	r3, r2
 800059a:	105b      	asrs	r3, r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
	if (y == CENTER) y = (OLED_HEIGHT - Font.height) / 2;
 800059e:	78bb      	ldrb	r3, [r7, #2]
 80005a0:	2bff      	cmp	r3, #255	; 0xff
 80005a2:	d108      	bne.n	80005b6 <OLED_DrawStr+0x6e>
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <OLED_DrawStr+0xcc>)
 80005a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80005aa:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80005ae:	0fda      	lsrs	r2, r3, #31
 80005b0:	4413      	add	r3, r2
 80005b2:	105b      	asrs	r3, r3, #1
 80005b4:	70bb      	strb	r3, [r7, #2]

	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	73bb      	strb	r3, [r7, #14]
 80005ba:	e021      	b.n	8000600 <OLED_DrawStr+0xb8>
	{
		OLED_DrawChar(*str, pos, y, mode);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7818      	ldrb	r0, [r3, #0]
 80005c0:	787b      	ldrb	r3, [r7, #1]
 80005c2:	78ba      	ldrb	r2, [r7, #2]
 80005c4:	7bf9      	ldrb	r1, [r7, #15]
 80005c6:	f7ff ff1b 	bl	8000400 <OLED_DrawChar>
		pos += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <OLED_DrawStr+0xcc>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <OLED_DrawStr+0xcc>)
 80005d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80005d4:	4619      	mov	r1, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <OLED_DrawStr+0xcc>)
 80005de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80005e2:	1ac3      	subs	r3, r0, r3
 80005e4:	fb01 f303 	mul.w	r3, r1, r3
 80005e8:	3304      	adds	r3, #4
 80005ea:	4413      	add	r3, r2
 80005ec:	781a      	ldrb	r2, [r3, #0]
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	4413      	add	r3, r2
 80005f2:	73fb      	strb	r3, [r7, #15]
	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 80005f4:	7bbb      	ldrb	r3, [r7, #14]
 80005f6:	3301      	adds	r3, #1
 80005f8:	73bb      	strb	r3, [r7, #14]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3301      	adds	r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	7bba      	ldrb	r2, [r7, #14]
 8000602:	7b7b      	ldrb	r3, [r7, #13]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3d9      	bcc.n	80005bc <OLED_DrawStr+0x74>
	}
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000480 	.word	0x20000480

08000618 <OLED_UpdateScreen>:
/**********************************************************************************/
/*                           U P D A T E   S C R E E N                            */
/**********************************************************************************/

void OLED_UpdateScreen()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	for (uint8_t page_number = 0; page_number < 8; page_number++)
 800061e:	2300      	movs	r3, #0
 8000620:	71fb      	strb	r3, [r7, #7]
 8000622:	e032      	b.n	800068a <OLED_UpdateScreen+0x72>
	{
		OLED_SendCommand(0x00 | (oled_start_column & 0x0F));	// lo tetrad starting column address
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <OLED_UpdateScreen+0x84>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	b2db      	uxtb	r3, r3
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fdb0 	bl	8000194 <OLED_SendCommand>
		OLED_SendCommand(0x10 | (oled_start_column >> 4));		// hi tetrad starting column address
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <OLED_UpdateScreen+0x84>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	091b      	lsrs	r3, r3, #4
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f043 0310 	orr.w	r3, r3, #16
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fda6 	bl	8000194 <OLED_SendCommand>

		OLED_SendCommand(0xB0 | page_number);					// starting address of the page
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800064e:	b2db      	uxtb	r3, r3
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fd9f 	bl	8000194 <OLED_SendCommand>

		for (int16_t j = 0; j < OLED_WIDTH; j++)
 8000656:	2300      	movs	r3, #0
 8000658:	80bb      	strh	r3, [r7, #4]
 800065a:	e00f      	b.n	800067c <OLED_UpdateScreen+0x64>
		{
			OLED_SendData(oled_buffer[page_number * OLED_WIDTH + j]);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	01da      	lsls	r2, r3, #7
 8000660:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <OLED_UpdateScreen+0x88>)
 8000668:	5cd3      	ldrb	r3, [r2, r3]
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fdac 	bl	80001c8 <OLED_SendData>
		for (int16_t j = 0; j < OLED_WIDTH; j++)
 8000670:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000674:	b29b      	uxth	r3, r3
 8000676:	3301      	adds	r3, #1
 8000678:	b29b      	uxth	r3, r3
 800067a:	80bb      	strh	r3, [r7, #4]
 800067c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000680:	2b7f      	cmp	r3, #127	; 0x7f
 8000682:	ddeb      	ble.n	800065c <OLED_UpdateScreen+0x44>
	for (uint8_t page_number = 0; page_number < 8; page_number++)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	3301      	adds	r3, #1
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b07      	cmp	r3, #7
 800068e:	d9c9      	bls.n	8000624 <OLED_UpdateScreen+0xc>
		}
	}
}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000000 	.word	0x20000000
 80006a0:	2000007c 	.word	0x2000007c

080006a4 <FontSet>:
#include "OLED_Fonts.h"

font_t Font;

void FontSet(const uint8_t* new_font)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	 Font.font = new_font;
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <FontSet+0x54>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6013      	str	r3, [r2, #0]
	 Font.width = (int16_t)fontbyte(0);
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <FontSet+0x54>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b21a      	sxth	r2, r3
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <FontSet+0x54>)
 80006bc:	809a      	strh	r2, [r3, #4]
	 Font.height = (int16_t)fontbyte(1);
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <FontSet+0x54>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	3301      	adds	r3, #1
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	b21a      	sxth	r2, r3
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <FontSet+0x54>)
 80006ca:	80da      	strh	r2, [r3, #6]
	 Font.offset = (int16_t)fontbyte(2);
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <FontSet+0x54>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3302      	adds	r3, #2
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <FontSet+0x54>)
 80006d8:	811a      	strh	r2, [r3, #8]
	 Font.numchars = (int16_t)fontbyte(3);
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <FontSet+0x54>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3303      	adds	r3, #3
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	b21a      	sxth	r2, r3
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <FontSet+0x54>)
 80006e6:	815a      	strh	r2, [r3, #10]
	 Font.inverted = NORMAL;
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <FontSet+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	731a      	strb	r2, [r3, #12]
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	20000480 	.word	0x20000480

080006fc <blink>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void blink(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
/*	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // инверсия вывода PC13
	HAL_Delay(500);*/
	OLED_Clear(0);
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff fde3 	bl	80002cc <OLED_Clear>
	//OLED_DrawRectangleFill(1, 56, 123, 63, 0); //clear previous rect
	//OLED_DrawRectangleFill(1, 56, x, 63, 1); //draw new rect
	//x+=2;
	//if(x>123)x=1;
	//OLED_UpdateOnePage(7);
	OLED_DrawNum((int16_t)__HAL_TIM_GET_COUNTER(&htim2)/4, 1, 25, 1);
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <blink+0x30>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070c:	b21b      	sxth	r3, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	da00      	bge.n	8000714 <blink+0x18>
 8000712:	3303      	adds	r3, #3
 8000714:	109b      	asrs	r3, r3, #2
 8000716:	b218      	sxth	r0, r3
 8000718:	2301      	movs	r3, #1
 800071a:	2219      	movs	r2, #25
 800071c:	2101      	movs	r1, #1
 800071e:	f7ff feef 	bl	8000500 <OLED_DrawNum>
	OLED_UpdateScreen();
 8000722:	f7ff ff79 	bl	8000618 <OLED_UpdateScreen>



}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200004e4 	.word	0x200004e4

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000734:	f000 fb1e 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000738:	f000 f84c 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073c:	f000 f93c 	bl	80009b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000740:	f000 f88e 	bl	8000860 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000744:	f000 f8ba 	bl	80008bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000748:	f000 f90c 	bl	8000964 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_Delay(100);
 800074c:	2064      	movs	r0, #100	; 0x64
 800074e:	f000 fb73 	bl	8000e38 <HAL_Delay>
  /* Init OLED */
  OLED_Init(&hi2c1);
 8000752:	4818      	ldr	r0, [pc, #96]	; (80007b4 <main+0x84>)
 8000754:	f7ff fd52 	bl	80001fc <OLED_Init>

  /* Text */
  FontSet(Segoe_UI_Rus_12);
 8000758:	4817      	ldr	r0, [pc, #92]	; (80007b8 <main+0x88>)
 800075a:	f7ff ffa3 	bl	80006a4 <FontSet>
  OLED_DrawStr("BN-Bylecnhbz", 1, 1, 1);
 800075e:	2301      	movs	r3, #1
 8000760:	2201      	movs	r2, #1
 8000762:	2101      	movs	r1, #1
 8000764:	4815      	ldr	r0, [pc, #84]	; (80007bc <main+0x8c>)
 8000766:	f7ff feef 	bl	8000548 <OLED_DrawStr>
  FontSet(Segoe_UI_Rus_10);
 800076a:	4815      	ldr	r0, [pc, #84]	; (80007c0 <main+0x90>)
 800076c:	f7ff ff9a 	bl	80006a4 <FontSet>
  OLED_DrawStr("BN-Bylecnhbz", 1, 18, 1);
 8000770:	2301      	movs	r3, #1
 8000772:	2212      	movs	r2, #18
 8000774:	2101      	movs	r1, #1
 8000776:	4811      	ldr	r0, [pc, #68]	; (80007bc <main+0x8c>)
 8000778:	f7ff fee6 	bl	8000548 <OLED_DrawStr>
  FontSet(Segoe_UI_Rus_8);
 800077c:	4811      	ldr	r0, [pc, #68]	; (80007c4 <main+0x94>)
 800077e:	f7ff ff91 	bl	80006a4 <FontSet>
  OLED_DrawStr("BN-Bylecnhbz", 1 , 32, 1);
 8000782:	2301      	movs	r3, #1
 8000784:	2220      	movs	r2, #32
 8000786:	2101      	movs	r1, #1
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <main+0x8c>)
 800078a:	f7ff fedd 	bl	8000548 <OLED_DrawStr>
  FontSet(Segoe_UI_Rus_12);
 800078e:	480a      	ldr	r0, [pc, #40]	; (80007b8 <main+0x88>)
 8000790:	f7ff ff88 	bl	80006a4 <FontSet>
  OLED_DrawCircle(26, 60, 3);
  OLED_DrawTriangle(40, 63, 45, 53, 50, 63);
  OLED_DrawTriangleFill(47, 53, 52, 63, 57, 53);*/

  /* Update screen */
  OLED_UpdateScreen();
 8000794:	f7ff ff40 	bl	8000618 <OLED_UpdateScreen>

  HAL_UART_Transmit(&huart1, (uint8_t*)"Hello World\n", 12, 1);
 8000798:	2301      	movs	r3, #1
 800079a:	220c      	movs	r2, #12
 800079c:	490a      	ldr	r1, [pc, #40]	; (80007c8 <main+0x98>)
 800079e:	480b      	ldr	r0, [pc, #44]	; (80007cc <main+0x9c>)
 80007a0:	f002 fa2c 	bl	8002bfc <HAL_UART_Transmit>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80007a4:	213c      	movs	r1, #60	; 0x3c
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <main+0xa0>)
 80007a8:	f002 f866 	bl	8002878 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  blink();
 80007ac:	f7ff ffa6 	bl	80006fc <blink>
 80007b0:	e7fc      	b.n	80007ac <main+0x7c>
 80007b2:	bf00      	nop
 80007b4:	20000490 	.word	0x20000490
 80007b8:	0800389c 	.word	0x0800389c
 80007bc:	0800387c 	.word	0x0800387c
 80007c0:	08004440 	.word	0x08004440
 80007c4:	08004e64 	.word	0x08004e64
 80007c8:	0800388c 	.word	0x0800388c
 80007cc:	2000052c 	.word	0x2000052c
 80007d0:	200004e4 	.word	0x200004e4

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b090      	sub	sp, #64	; 0x40
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0318 	add.w	r3, r7, #24
 80007de:	2228      	movs	r2, #40	; 0x28
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fbaa 	bl	8002f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000810:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000812:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000816:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0318 	add.w	r3, r7, #24
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fb79 	bl	8001f14 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000828:	f000 f92c 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000830:	2302      	movs	r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2102      	movs	r1, #2
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fde6 	bl	8002418 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000852:	f000 f917 	bl	8000a84 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3740      	adds	r7, #64	; 0x40
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000866:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <MX_I2C1_Init+0x54>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_I2C1_Init+0x50>)
 800086c:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_I2C1_Init+0x58>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_I2C1_Init+0x50>)
 800087e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000882:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_I2C1_Init+0x50>)
 800089e:	f000 fd6f 	bl	8001380 <HAL_I2C_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a8:	f000 f8ec 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000490 	.word	0x20000490
 80008b4:	40005400 	.word	0x40005400
 80008b8:	00061a80 	.word	0x00061a80

080008bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2224      	movs	r2, #36	; 0x24
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 fb36 	bl	8002f3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d8:	4b21      	ldr	r3, [pc, #132]	; (8000960 <MX_TIM2_Init+0xa4>)
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_TIM2_Init+0xa4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e6:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <MX_TIM2_Init+0xa4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_TIM2_Init+0xa4>)
 80008ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_TIM2_Init+0xa4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_TIM2_Init+0xa4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000900:	2303      	movs	r3, #3
 8000902:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000904:	2302      	movs	r3, #2
 8000906:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000908:	2301      	movs	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000910:	230a      	movs	r3, #10
 8000912:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000914:	2302      	movs	r3, #2
 8000916:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000918:	2301      	movs	r3, #1
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000920:	230a      	movs	r3, #10
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_TIM2_Init+0xa4>)
 800092c:	f001 ff02 	bl	8002734 <HAL_TIM_Encoder_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000936:	f000 f8a5 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <MX_TIM2_Init+0xa4>)
 8000948:	f002 f8aa 	bl	8002aa0 <HAL_TIMEx_MasterConfigSynchronization>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000952:	f000 f897 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	3730      	adds	r7, #48	; 0x30
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200004e4 	.word	0x200004e4

08000964 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_USART1_UART_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800099c:	f002 f8de 	bl	8002b5c <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009a6:	f000 f86d 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000052c 	.word	0x2000052c
 80009b4:	40013800 	.word	0x40013800

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009cc:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <MX_GPIO_Init+0xc0>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a29      	ldr	r2, [pc, #164]	; (8000a78 <MX_GPIO_Init+0xc0>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <MX_GPIO_Init+0xc0>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <MX_GPIO_Init+0xc0>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <MX_GPIO_Init+0xc0>)
 80009ea:	f043 0320 	orr.w	r3, r3, #32
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_GPIO_Init+0xc0>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0320 	and.w	r3, r3, #32
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_GPIO_Init+0xc0>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <MX_GPIO_Init+0xc0>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_GPIO_Init+0xc0>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_GPIO_Init+0xc0>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <MX_GPIO_Init+0xc0>)
 8000a1a:	f043 0308 	orr.w	r3, r3, #8
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_GPIO_Init+0xc0>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_built_in_GPIO_Port, LED_built_in_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a32:	4812      	ldr	r0, [pc, #72]	; (8000a7c <MX_GPIO_Init+0xc4>)
 8000a34:	f000 fc8c 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_built_in_Pin */
  GPIO_InitStruct.Pin = LED_built_in_Pin;
 8000a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_built_in_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480a      	ldr	r0, [pc, #40]	; (8000a7c <MX_GPIO_Init+0xc4>)
 8000a52:	f000 faf9 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BTN_Pin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8000a56:	2304      	movs	r3, #4
 8000a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 0310 	add.w	r3, r7, #16
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_GPIO_Init+0xc8>)
 8000a6a:	f000 faed 	bl	8001048 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6e:	bf00      	nop
 8000a70:	3720      	adds	r7, #32
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40011000 	.word	0x40011000
 8000a80:	40010800 	.word	0x40010800

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_MspInit+0x40>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <HAL_MspInit+0x40>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6193      	str	r3, [r2, #24]
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_MspInit+0x40>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_MspInit+0x40>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_MspInit+0x40>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	61d3      	str	r3, [r2, #28]
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_MspInit+0x40>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a15      	ldr	r2, [pc, #84]	; (8000b44 <HAL_I2C_MspInit+0x70>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d123      	bne.n	8000b3c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_I2C_MspInit+0x74>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <HAL_I2C_MspInit+0x74>)
 8000afa:	f043 0308 	orr.w	r3, r3, #8
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_I2C_MspInit+0x74>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0308 	and.w	r3, r3, #8
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b0c:	23c0      	movs	r3, #192	; 0xc0
 8000b0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b10:	2312      	movs	r3, #18
 8000b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480b      	ldr	r0, [pc, #44]	; (8000b4c <HAL_I2C_MspInit+0x78>)
 8000b20:	f000 fa92 	bl	8001048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_I2C_MspInit+0x74>)
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_I2C_MspInit+0x74>)
 8000b2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b2e:	61d3      	str	r3, [r2, #28]
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_I2C_MspInit+0x74>)
 8000b32:	69db      	ldr	r3, [r3, #28]
 8000b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3720      	adds	r7, #32
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40005400 	.word	0x40005400
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010c00 	.word	0x40010c00

08000b50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b6e:	d123      	bne.n	8000bb8 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b72:	69db      	ldr	r3, [r3, #28]
 8000b74:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	61d3      	str	r3, [r2, #28]
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b7e:	69db      	ldr	r3, [r3, #28]
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <HAL_TIM_Encoder_MspInit+0x74>)
 8000bb4:	f000 fa48 	bl	8001048 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3720      	adds	r7, #32
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010800 	.word	0x40010800

08000bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <HAL_UART_MspInit+0x8c>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d131      	bne.n	8000c4c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <HAL_UART_MspInit+0x90>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a1a      	ldr	r2, [pc, #104]	; (8000c58 <HAL_UART_MspInit+0x90>)
 8000bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_UART_MspInit+0x90>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_UART_MspInit+0x90>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <HAL_UART_MspInit+0x90>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_UART_MspInit+0x90>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <HAL_UART_MspInit+0x94>)
 8000c2e:	f000 fa0b 	bl	8001048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4619      	mov	r1, r3
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_UART_MspInit+0x94>)
 8000c48:	f000 f9fe 	bl	8001048 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c4c:	bf00      	nop
 8000c4e:	3720      	adds	r7, #32
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40013800 	.word	0x40013800
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40010800 	.word	0x40010800

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca6:	f000 f8ab 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <_sbrk+0x5c>)
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <_sbrk+0x60>)
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <_sbrk+0x64>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <_sbrk+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d207      	bcs.n	8000cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce0:	f002 f934 	bl	8002f4c <__errno>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	e009      	b.n	8000d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <_sbrk+0x64>)
 8000d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20005000 	.word	0x20005000
 8000d10:	00000400 	.word	0x00000400
 8000d14:	20000574 	.word	0x20000574
 8000d18:	200006c8 	.word	0x200006c8

08000d1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d28:	f7ff fff8 	bl	8000d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d2e:	490c      	ldr	r1, [pc, #48]	; (8000d60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d30:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d44:	4c09      	ldr	r4, [pc, #36]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d52:	f002 f901 	bl	8002f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d56:	f7ff fceb 	bl	8000730 <main>
  bx lr
 8000d5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d64:	08005770 	.word	0x08005770
  ldr r2, =_sbss
 8000d68:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d6c:	200006c4 	.word	0x200006c4

08000d70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC1_2_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_Init+0x28>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_Init+0x28>)
 8000d7e:	f043 0310 	orr.w	r3, r3, #16
 8000d82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f92b 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f000 f808 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fe7e 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40022000 	.word	0x40022000

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x54>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x58>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f935 	bl	800102e <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00e      	b.n	8000dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d80a      	bhi.n	8000dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f000 f90b 	bl	8000ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <HAL_InitTick+0x5c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000004 	.word	0x20000004
 8000df8:	2000000c 	.word	0x2000000c
 8000dfc:	20000008 	.word	0x20000008

08000e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_IncTick+0x1c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_IncTick+0x20>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a03      	ldr	r2, [pc, #12]	; (8000e20 <HAL_IncTick+0x20>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	2000000c 	.word	0x2000000c
 8000e20:	20000578 	.word	0x20000578

08000e24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b02      	ldr	r3, [pc, #8]	; (8000e34 <HAL_GetTick+0x10>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	20000578 	.word	0x20000578

08000e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e40:	f7ff fff0 	bl	8000e24 <HAL_GetTick>
 8000e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e50:	d005      	beq.n	8000e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_Delay+0x44>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e5e:	bf00      	nop
 8000e60:	f7ff ffe0 	bl	8000e24 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d8f7      	bhi.n	8000e60 <HAL_Delay+0x28>
  {
  }
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000000c 	.word	0x2000000c

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff90 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff49 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff5e 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff90 	bl	8000f38 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5f 	bl	8000ee4 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffb0 	bl	8000f9c <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b08b      	sub	sp, #44	; 0x2c
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105a:	e169      	b.n	8001330 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800105c:	2201      	movs	r2, #1
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	429a      	cmp	r2, r3
 8001076:	f040 8158 	bne.w	800132a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4a9a      	ldr	r2, [pc, #616]	; (80012e8 <HAL_GPIO_Init+0x2a0>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d05e      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
 8001084:	4a98      	ldr	r2, [pc, #608]	; (80012e8 <HAL_GPIO_Init+0x2a0>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d875      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 800108a:	4a98      	ldr	r2, [pc, #608]	; (80012ec <HAL_GPIO_Init+0x2a4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d058      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
 8001090:	4a96      	ldr	r2, [pc, #600]	; (80012ec <HAL_GPIO_Init+0x2a4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d86f      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 8001096:	4a96      	ldr	r2, [pc, #600]	; (80012f0 <HAL_GPIO_Init+0x2a8>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d052      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
 800109c:	4a94      	ldr	r2, [pc, #592]	; (80012f0 <HAL_GPIO_Init+0x2a8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d869      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 80010a2:	4a94      	ldr	r2, [pc, #592]	; (80012f4 <HAL_GPIO_Init+0x2ac>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d04c      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
 80010a8:	4a92      	ldr	r2, [pc, #584]	; (80012f4 <HAL_GPIO_Init+0x2ac>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d863      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 80010ae:	4a92      	ldr	r2, [pc, #584]	; (80012f8 <HAL_GPIO_Init+0x2b0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d046      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
 80010b4:	4a90      	ldr	r2, [pc, #576]	; (80012f8 <HAL_GPIO_Init+0x2b0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d85d      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 80010ba:	2b12      	cmp	r3, #18
 80010bc:	d82a      	bhi.n	8001114 <HAL_GPIO_Init+0xcc>
 80010be:	2b12      	cmp	r3, #18
 80010c0:	d859      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 80010c2:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <HAL_GPIO_Init+0x80>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	08001143 	.word	0x08001143
 80010cc:	0800111d 	.word	0x0800111d
 80010d0:	0800112f 	.word	0x0800112f
 80010d4:	08001171 	.word	0x08001171
 80010d8:	08001177 	.word	0x08001177
 80010dc:	08001177 	.word	0x08001177
 80010e0:	08001177 	.word	0x08001177
 80010e4:	08001177 	.word	0x08001177
 80010e8:	08001177 	.word	0x08001177
 80010ec:	08001177 	.word	0x08001177
 80010f0:	08001177 	.word	0x08001177
 80010f4:	08001177 	.word	0x08001177
 80010f8:	08001177 	.word	0x08001177
 80010fc:	08001177 	.word	0x08001177
 8001100:	08001177 	.word	0x08001177
 8001104:	08001177 	.word	0x08001177
 8001108:	08001177 	.word	0x08001177
 800110c:	08001125 	.word	0x08001125
 8001110:	08001139 	.word	0x08001139
 8001114:	4a79      	ldr	r2, [pc, #484]	; (80012fc <HAL_GPIO_Init+0x2b4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d013      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800111a:	e02c      	b.n	8001176 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	623b      	str	r3, [r7, #32]
          break;
 8001122:	e029      	b.n	8001178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	3304      	adds	r3, #4
 800112a:	623b      	str	r3, [r7, #32]
          break;
 800112c:	e024      	b.n	8001178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	3308      	adds	r3, #8
 8001134:	623b      	str	r3, [r7, #32]
          break;
 8001136:	e01f      	b.n	8001178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	330c      	adds	r3, #12
 800113e:	623b      	str	r3, [r7, #32]
          break;
 8001140:	e01a      	b.n	8001178 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800114a:	2304      	movs	r3, #4
 800114c:	623b      	str	r3, [r7, #32]
          break;
 800114e:	e013      	b.n	8001178 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d105      	bne.n	8001164 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001158:	2308      	movs	r3, #8
 800115a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	611a      	str	r2, [r3, #16]
          break;
 8001162:	e009      	b.n	8001178 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001164:	2308      	movs	r3, #8
 8001166:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	615a      	str	r2, [r3, #20]
          break;
 800116e:	e003      	b.n	8001178 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
          break;
 8001174:	e000      	b.n	8001178 <HAL_GPIO_Init+0x130>
          break;
 8001176:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	2bff      	cmp	r3, #255	; 0xff
 800117c:	d801      	bhi.n	8001182 <HAL_GPIO_Init+0x13a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	e001      	b.n	8001186 <HAL_GPIO_Init+0x13e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3304      	adds	r3, #4
 8001186:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2bff      	cmp	r3, #255	; 0xff
 800118c:	d802      	bhi.n	8001194 <HAL_GPIO_Init+0x14c>
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	e002      	b.n	800119a <HAL_GPIO_Init+0x152>
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	3b08      	subs	r3, #8
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	210f      	movs	r1, #15
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	401a      	ands	r2, r3
 80011ac:	6a39      	ldr	r1, [r7, #32]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	431a      	orrs	r2, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80b1 	beq.w	800132a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011c8:	4b4d      	ldr	r3, [pc, #308]	; (8001300 <HAL_GPIO_Init+0x2b8>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a4c      	ldr	r2, [pc, #304]	; (8001300 <HAL_GPIO_Init+0x2b8>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b4a      	ldr	r3, [pc, #296]	; (8001300 <HAL_GPIO_Init+0x2b8>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011e0:	4a48      	ldr	r2, [pc, #288]	; (8001304 <HAL_GPIO_Init+0x2bc>)
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	220f      	movs	r2, #15
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4013      	ands	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a40      	ldr	r2, [pc, #256]	; (8001308 <HAL_GPIO_Init+0x2c0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d013      	beq.n	8001234 <HAL_GPIO_Init+0x1ec>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a3f      	ldr	r2, [pc, #252]	; (800130c <HAL_GPIO_Init+0x2c4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d00d      	beq.n	8001230 <HAL_GPIO_Init+0x1e8>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a3e      	ldr	r2, [pc, #248]	; (8001310 <HAL_GPIO_Init+0x2c8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d007      	beq.n	800122c <HAL_GPIO_Init+0x1e4>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a3d      	ldr	r2, [pc, #244]	; (8001314 <HAL_GPIO_Init+0x2cc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d101      	bne.n	8001228 <HAL_GPIO_Init+0x1e0>
 8001224:	2303      	movs	r3, #3
 8001226:	e006      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 8001228:	2304      	movs	r3, #4
 800122a:	e004      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 800122c:	2302      	movs	r3, #2
 800122e:	e002      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 8001234:	2300      	movs	r3, #0
 8001236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001238:	f002 0203 	and.w	r2, r2, #3
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	4093      	lsls	r3, r2
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001246:	492f      	ldr	r1, [pc, #188]	; (8001304 <HAL_GPIO_Init+0x2bc>)
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	492c      	ldr	r1, [pc, #176]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	608b      	str	r3, [r1, #8]
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	43db      	mvns	r3, r3
 8001276:	4928      	ldr	r1, [pc, #160]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 8001278:	4013      	ands	r3, r2
 800127a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	4922      	ldr	r1, [pc, #136]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	60cb      	str	r3, [r1, #12]
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	43db      	mvns	r3, r3
 800129e:	491e      	ldr	r1, [pc, #120]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	4918      	ldr	r1, [pc, #96]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	4914      	ldr	r1, [pc, #80]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d021      	beq.n	800131c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	490e      	ldr	r1, [pc, #56]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	600b      	str	r3, [r1, #0]
 80012e4:	e021      	b.n	800132a <HAL_GPIO_Init+0x2e2>
 80012e6:	bf00      	nop
 80012e8:	10320000 	.word	0x10320000
 80012ec:	10310000 	.word	0x10310000
 80012f0:	10220000 	.word	0x10220000
 80012f4:	10210000 	.word	0x10210000
 80012f8:	10120000 	.word	0x10120000
 80012fc:	10110000 	.word	0x10110000
 8001300:	40021000 	.word	0x40021000
 8001304:	40010000 	.word	0x40010000
 8001308:	40010800 	.word	0x40010800
 800130c:	40010c00 	.word	0x40010c00
 8001310:	40011000 	.word	0x40011000
 8001314:	40011400 	.word	0x40011400
 8001318:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_GPIO_Init+0x304>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	43db      	mvns	r3, r3
 8001324:	4909      	ldr	r1, [pc, #36]	; (800134c <HAL_GPIO_Init+0x304>)
 8001326:	4013      	ands	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	3301      	adds	r3, #1
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	fa22 f303 	lsr.w	r3, r2, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	f47f ae8e 	bne.w	800105c <HAL_GPIO_Init+0x14>
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	372c      	adds	r7, #44	; 0x2c
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	40010400 	.word	0x40010400

08001350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
 800135c:	4613      	mov	r3, r2
 800135e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001360:	787b      	ldrb	r3, [r7, #1]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800136c:	e003      	b.n	8001376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800136e:	887b      	ldrh	r3, [r7, #2]
 8001370:	041a      	lsls	r2, r3, #16
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	611a      	str	r2, [r3, #16]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e12b      	b.n	80015ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d106      	bne.n	80013ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fb94 	bl	8000ad4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2224      	movs	r2, #36	; 0x24
 80013b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013e4:	f001 f960 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 80013e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4a81      	ldr	r2, [pc, #516]	; (80015f4 <HAL_I2C_Init+0x274>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d807      	bhi.n	8001404 <HAL_I2C_Init+0x84>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4a80      	ldr	r2, [pc, #512]	; (80015f8 <HAL_I2C_Init+0x278>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	bf94      	ite	ls
 80013fc:	2301      	movls	r3, #1
 80013fe:	2300      	movhi	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	e006      	b.n	8001412 <HAL_I2C_Init+0x92>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4a7d      	ldr	r2, [pc, #500]	; (80015fc <HAL_I2C_Init+0x27c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	bf94      	ite	ls
 800140c:	2301      	movls	r3, #1
 800140e:	2300      	movhi	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e0e7      	b.n	80015ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4a78      	ldr	r2, [pc, #480]	; (8001600 <HAL_I2C_Init+0x280>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	0c9b      	lsrs	r3, r3, #18
 8001424:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	430a      	orrs	r2, r1
 8001438:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4a6a      	ldr	r2, [pc, #424]	; (80015f4 <HAL_I2C_Init+0x274>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d802      	bhi.n	8001454 <HAL_I2C_Init+0xd4>
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	3301      	adds	r3, #1
 8001452:	e009      	b.n	8001468 <HAL_I2C_Init+0xe8>
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	4a69      	ldr	r2, [pc, #420]	; (8001604 <HAL_I2C_Init+0x284>)
 8001460:	fba2 2303 	umull	r2, r3, r2, r3
 8001464:	099b      	lsrs	r3, r3, #6
 8001466:	3301      	adds	r3, #1
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	430b      	orrs	r3, r1
 800146e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800147a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	495c      	ldr	r1, [pc, #368]	; (80015f4 <HAL_I2C_Init+0x274>)
 8001484:	428b      	cmp	r3, r1
 8001486:	d819      	bhi.n	80014bc <HAL_I2C_Init+0x13c>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1e59      	subs	r1, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fbb1 f3f3 	udiv	r3, r1, r3
 8001496:	1c59      	adds	r1, r3, #1
 8001498:	f640 73fc 	movw	r3, #4092	; 0xffc
 800149c:	400b      	ands	r3, r1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00a      	beq.n	80014b8 <HAL_I2C_Init+0x138>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	1e59      	subs	r1, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80014b0:	3301      	adds	r3, #1
 80014b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b6:	e051      	b.n	800155c <HAL_I2C_Init+0x1dc>
 80014b8:	2304      	movs	r3, #4
 80014ba:	e04f      	b.n	800155c <HAL_I2C_Init+0x1dc>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d111      	bne.n	80014e8 <HAL_I2C_Init+0x168>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1e58      	subs	r0, r3, #1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6859      	ldr	r1, [r3, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	440b      	add	r3, r1
 80014d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf0c      	ite	eq
 80014e0:	2301      	moveq	r3, #1
 80014e2:	2300      	movne	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	e012      	b.n	800150e <HAL_I2C_Init+0x18e>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1e58      	subs	r0, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	0099      	lsls	r1, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001504:	2b00      	cmp	r3, #0
 8001506:	bf0c      	ite	eq
 8001508:	2301      	moveq	r3, #1
 800150a:	2300      	movne	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_I2C_Init+0x196>
 8001512:	2301      	movs	r3, #1
 8001514:	e022      	b.n	800155c <HAL_I2C_Init+0x1dc>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10e      	bne.n	800153c <HAL_I2C_Init+0x1bc>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1e58      	subs	r0, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6859      	ldr	r1, [r3, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	440b      	add	r3, r1
 800152c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001530:	3301      	adds	r3, #1
 8001532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153a:	e00f      	b.n	800155c <HAL_I2C_Init+0x1dc>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	1e58      	subs	r0, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	0099      	lsls	r1, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001552:	3301      	adds	r3, #1
 8001554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	6809      	ldr	r1, [r1, #0]
 8001560:	4313      	orrs	r3, r2
 8001562:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69da      	ldr	r2, [r3, #28]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800158a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6911      	ldr	r1, [r2, #16]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68d2      	ldr	r2, [r2, #12]
 8001596:	4311      	orrs	r1, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	430b      	orrs	r3, r1
 800159e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695a      	ldr	r2, [r3, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2220      	movs	r2, #32
 80015d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	000186a0 	.word	0x000186a0
 80015f8:	001e847f 	.word	0x001e847f
 80015fc:	003d08ff 	.word	0x003d08ff
 8001600:	431bde83 	.word	0x431bde83
 8001604:	10624dd3 	.word	0x10624dd3

08001608 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af02      	add	r7, sp, #8
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	461a      	mov	r2, r3
 8001614:	460b      	mov	r3, r1
 8001616:	817b      	strh	r3, [r7, #10]
 8001618:	4613      	mov	r3, r2
 800161a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff fc02 	bl	8000e24 <HAL_GetTick>
 8001620:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b20      	cmp	r3, #32
 800162c:	f040 80e0 	bne.w	80017f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2319      	movs	r3, #25
 8001636:	2201      	movs	r2, #1
 8001638:	4970      	ldr	r1, [pc, #448]	; (80017fc <HAL_I2C_Master_Transmit+0x1f4>)
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 fa92 	bl	8001b64 <I2C_WaitOnFlagUntilTimeout>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001646:	2302      	movs	r3, #2
 8001648:	e0d3      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_I2C_Master_Transmit+0x50>
 8001654:	2302      	movs	r3, #2
 8001656:	e0cc      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x1ea>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b01      	cmp	r3, #1
 800166c:	d007      	beq.n	800167e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0201 	orr.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2221      	movs	r2, #33	; 0x21
 8001692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2210      	movs	r2, #16
 800169a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	893a      	ldrh	r2, [r7, #8]
 80016ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4a50      	ldr	r2, [pc, #320]	; (8001800 <HAL_I2C_Master_Transmit+0x1f8>)
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016c0:	8979      	ldrh	r1, [r7, #10]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	6a3a      	ldr	r2, [r7, #32]
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 f9ca 	bl	8001a60 <I2C_MasterRequestWrite>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e08d      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016ec:	e066      	b.n	80017bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	6a39      	ldr	r1, [r7, #32]
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 fb50 	bl	8001d98 <I2C_WaitOnTXEFlagUntilTimeout>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00d      	beq.n	800171a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	2b04      	cmp	r3, #4
 8001704:	d107      	bne.n	8001716 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001714:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e06b      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	781a      	ldrb	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001734:	b29b      	uxth	r3, r3
 8001736:	3b01      	subs	r3, #1
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001742:	3b01      	subs	r3, #1
 8001744:	b29a      	uxth	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b04      	cmp	r3, #4
 8001756:	d11b      	bne.n	8001790 <HAL_I2C_Master_Transmit+0x188>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175c:	2b00      	cmp	r3, #0
 800175e:	d017      	beq.n	8001790 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	781a      	ldrb	r2, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b01      	subs	r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001788:	3b01      	subs	r3, #1
 800178a:	b29a      	uxth	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	6a39      	ldr	r1, [r7, #32]
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 fb47 	bl	8001e28 <I2C_WaitOnBTFFlagUntilTimeout>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00d      	beq.n	80017bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d107      	bne.n	80017b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e01a      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d194      	bne.n	80016ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e000      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017f0:	2302      	movs	r3, #2
  }
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	00100002 	.word	0x00100002
 8001800:	ffff0000 	.word	0xffff0000

08001804 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af02      	add	r7, sp, #8
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	460b      	mov	r3, r1
 8001812:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001814:	f7ff fb06 	bl	8000e24 <HAL_GetTick>
 8001818:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b20      	cmp	r3, #32
 8001828:	f040 8111 	bne.w	8001a4e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2319      	movs	r3, #25
 8001832:	2201      	movs	r2, #1
 8001834:	4988      	ldr	r1, [pc, #544]	; (8001a58 <HAL_I2C_IsDeviceReady+0x254>)
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 f994 	bl	8001b64 <I2C_WaitOnFlagUntilTimeout>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001842:	2302      	movs	r3, #2
 8001844:	e104      	b.n	8001a50 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_I2C_IsDeviceReady+0x50>
 8001850:	2302      	movs	r3, #2
 8001852:	e0fd      	b.n	8001a50 <HAL_I2C_IsDeviceReady+0x24c>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b01      	cmp	r3, #1
 8001868:	d007      	beq.n	800187a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 0201 	orr.w	r2, r2, #1
 8001878:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001888:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2224      	movs	r2, #36	; 0x24
 800188e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4a70      	ldr	r2, [pc, #448]	; (8001a5c <HAL_I2C_IsDeviceReady+0x258>)
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 f952 	bl	8001b64 <I2C_WaitOnFlagUntilTimeout>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00d      	beq.n	80018e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018d4:	d103      	bne.n	80018de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e0b6      	b.n	8001a50 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018e2:	897b      	ldrh	r3, [r7, #10]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80018f2:	f7ff fa97 	bl	8000e24 <HAL_GetTick>
 80018f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b02      	cmp	r3, #2
 8001904:	bf0c      	ite	eq
 8001906:	2301      	moveq	r3, #1
 8001908:	2300      	movne	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800191c:	bf0c      	ite	eq
 800191e:	2301      	moveq	r3, #1
 8001920:	2300      	movne	r3, #0
 8001922:	b2db      	uxtb	r3, r3
 8001924:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001926:	e025      	b.n	8001974 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001928:	f7ff fa7c 	bl	8000e24 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d302      	bcc.n	800193e <HAL_I2C_IsDeviceReady+0x13a>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d103      	bne.n	8001946 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	22a0      	movs	r2, #160	; 0xa0
 8001942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b02      	cmp	r3, #2
 8001952:	bf0c      	ite	eq
 8001954:	2301      	moveq	r3, #1
 8001956:	2300      	movne	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2ba0      	cmp	r3, #160	; 0xa0
 800197e:	d005      	beq.n	800198c <HAL_I2C_IsDeviceReady+0x188>
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <HAL_I2C_IsDeviceReady+0x188>
 8001986:	7dbb      	ldrb	r3, [r7, #22]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0cd      	beq.n	8001928 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2220      	movs	r2, #32
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d129      	bne.n	80019f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2319      	movs	r3, #25
 80019ce:	2201      	movs	r2, #1
 80019d0:	4921      	ldr	r1, [pc, #132]	; (8001a58 <HAL_I2C_IsDeviceReady+0x254>)
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f8c6 	bl	8001b64 <I2C_WaitOnFlagUntilTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e036      	b.n	8001a50 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2220      	movs	r2, #32
 80019e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e02c      	b.n	8001a50 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a04:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a0e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2319      	movs	r3, #25
 8001a16:	2201      	movs	r2, #1
 8001a18:	490f      	ldr	r1, [pc, #60]	; (8001a58 <HAL_I2C_IsDeviceReady+0x254>)
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 f8a2 	bl	8001b64 <I2C_WaitOnFlagUntilTimeout>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e012      	b.n	8001a50 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	f4ff af32 	bcc.w	800189e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001a4e:	2302      	movs	r3, #2
  }
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	00100002 	.word	0x00100002
 8001a5c:	ffff0000 	.word	0xffff0000

08001a60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d006      	beq.n	8001a8a <I2C_MasterRequestWrite+0x2a>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d003      	beq.n	8001a8a <I2C_MasterRequestWrite+0x2a>
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a88:	d108      	bne.n	8001a9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e00b      	b.n	8001ab4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	2b12      	cmp	r3, #18
 8001aa2:	d107      	bne.n	8001ab4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ab2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f84f 	bl	8001b64 <I2C_WaitOnFlagUntilTimeout>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00d      	beq.n	8001ae8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ada:	d103      	bne.n	8001ae4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e035      	b.n	8001b54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001af0:	d108      	bne.n	8001b04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001af2:	897b      	ldrh	r3, [r7, #10]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b00:	611a      	str	r2, [r3, #16]
 8001b02:	e01b      	b.n	8001b3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b04:	897b      	ldrh	r3, [r7, #10]
 8001b06:	11db      	asrs	r3, r3, #7
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f003 0306 	and.w	r3, r3, #6
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f063 030f 	orn	r3, r3, #15
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	490e      	ldr	r1, [pc, #56]	; (8001b5c <I2C_MasterRequestWrite+0xfc>)
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 f898 	bl	8001c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e010      	b.n	8001b54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b32:	897b      	ldrh	r3, [r7, #10]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <I2C_MasterRequestWrite+0x100>)
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f888 	bl	8001c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	00010008 	.word	0x00010008
 8001b60:	00010002 	.word	0x00010002

08001b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	4613      	mov	r3, r2
 8001b72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b74:	e048      	b.n	8001c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d044      	beq.n	8001c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b7e:	f7ff f951 	bl	8000e24 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d302      	bcc.n	8001b94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d139      	bne.n	8001c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	0c1b      	lsrs	r3, r3, #16
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d10d      	bne.n	8001bba <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	43da      	mvns	r2, r3
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	e00c      	b.n	8001bd4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	43da      	mvns	r2, r3
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bf0c      	ite	eq
 8001bcc:	2301      	moveq	r3, #1
 8001bce:	2300      	movne	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d116      	bne.n	8001c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f043 0220 	orr.w	r2, r3, #32
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e023      	b.n	8001c50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	0c1b      	lsrs	r3, r3, #16
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d10d      	bne.n	8001c2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	43da      	mvns	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	bf0c      	ite	eq
 8001c24:	2301      	moveq	r3, #1
 8001c26:	2300      	movne	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	e00c      	b.n	8001c48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	43da      	mvns	r2, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf0c      	ite	eq
 8001c40:	2301      	moveq	r3, #1
 8001c42:	2300      	movne	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d093      	beq.n	8001b76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c66:	e071      	b.n	8001d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c76:	d123      	bne.n	8001cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f043 0204 	orr.w	r2, r3, #4
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e067      	b.n	8001d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc6:	d041      	beq.n	8001d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc8:	f7ff f8ac 	bl	8000e24 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d302      	bcc.n	8001cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d136      	bne.n	8001d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d10c      	bne.n	8001d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	bf14      	ite	ne
 8001cfa:	2301      	movne	r3, #1
 8001cfc:	2300      	moveq	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	e00b      	b.n	8001d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	43da      	mvns	r2, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf14      	ite	ne
 8001d14:	2301      	movne	r3, #1
 8001d16:	2300      	moveq	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d016      	beq.n	8001d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	f043 0220 	orr.w	r2, r3, #32
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e021      	b.n	8001d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	0c1b      	lsrs	r3, r3, #16
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d10c      	bne.n	8001d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	43da      	mvns	r2, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	4013      	ands	r3, r2
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf14      	ite	ne
 8001d68:	2301      	movne	r3, #1
 8001d6a:	2300      	moveq	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	e00b      	b.n	8001d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	43da      	mvns	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	bf14      	ite	ne
 8001d82:	2301      	movne	r3, #1
 8001d84:	2300      	moveq	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f47f af6d 	bne.w	8001c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001da4:	e034      	b.n	8001e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f886 	bl	8001eb8 <I2C_IsAcknowledgeFailed>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e034      	b.n	8001e20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d028      	beq.n	8001e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dbe:	f7ff f831 	bl	8000e24 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d302      	bcc.n	8001dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d11d      	bne.n	8001e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dde:	2b80      	cmp	r3, #128	; 0x80
 8001de0:	d016      	beq.n	8001e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f043 0220 	orr.w	r2, r3, #32
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e007      	b.n	8001e20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	2b80      	cmp	r3, #128	; 0x80
 8001e1c:	d1c3      	bne.n	8001da6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e34:	e034      	b.n	8001ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f83e 	bl	8001eb8 <I2C_IsAcknowledgeFailed>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e034      	b.n	8001eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d028      	beq.n	8001ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e4e:	f7fe ffe9 	bl	8000e24 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d302      	bcc.n	8001e64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d11d      	bne.n	8001ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d016      	beq.n	8001ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f043 0220 	orr.w	r2, r3, #32
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e007      	b.n	8001eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d1c3      	bne.n	8001e36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ece:	d11b      	bne.n	8001f08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ed8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f043 0204 	orr.w	r2, r3, #4
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e272      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8087 	beq.w	8002042 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f34:	4b92      	ldr	r3, [pc, #584]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d00c      	beq.n	8001f5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f40:	4b8f      	ldr	r3, [pc, #572]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d112      	bne.n	8001f72 <HAL_RCC_OscConfig+0x5e>
 8001f4c:	4b8c      	ldr	r3, [pc, #560]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f58:	d10b      	bne.n	8001f72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5a:	4b89      	ldr	r3, [pc, #548]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d06c      	beq.n	8002040 <HAL_RCC_OscConfig+0x12c>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d168      	bne.n	8002040 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e24c      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x76>
 8001f7c:	4b80      	ldr	r3, [pc, #512]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a7f      	ldr	r2, [pc, #508]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	e02e      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd4>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0x98>
 8001f92:	4b7b      	ldr	r3, [pc, #492]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a7a      	ldr	r2, [pc, #488]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b78      	ldr	r3, [pc, #480]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a77      	ldr	r2, [pc, #476]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e01d      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd4>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0xbc>
 8001fb6:	4b72      	ldr	r3, [pc, #456]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a71      	ldr	r2, [pc, #452]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b6f      	ldr	r3, [pc, #444]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a6e      	ldr	r2, [pc, #440]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd4>
 8001fd0:	4b6b      	ldr	r3, [pc, #428]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a6a      	ldr	r2, [pc, #424]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b68      	ldr	r3, [pc, #416]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a67      	ldr	r2, [pc, #412]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7fe ff18 	bl	8000e24 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7fe ff14 	bl	8000e24 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e200      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b5d      	ldr	r3, [pc, #372]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0xe4>
 8002016:	e014      	b.n	8002042 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe ff04 	bl	8000e24 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7fe ff00 	bl	8000e24 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e1ec      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002032:	4b53      	ldr	r3, [pc, #332]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x10c>
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d063      	beq.n	8002116 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800204e:	4b4c      	ldr	r3, [pc, #304]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800205a:	4b49      	ldr	r3, [pc, #292]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b08      	cmp	r3, #8
 8002064:	d11c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x18c>
 8002066:	4b46      	ldr	r3, [pc, #280]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d116      	bne.n	80020a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002072:	4b43      	ldr	r3, [pc, #268]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_RCC_OscConfig+0x176>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d001      	beq.n	800208a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e1c0      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208a:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4939      	ldr	r1, [pc, #228]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	e03a      	b.n	8002116 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a8:	4b36      	ldr	r3, [pc, #216]	; (8002184 <HAL_RCC_OscConfig+0x270>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7fe feb9 	bl	8000e24 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b6:	f7fe feb5 	bl	8000e24 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e1a1      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d4:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4927      	ldr	r1, [pc, #156]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
 80020e8:	e015      	b.n	8002116 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <HAL_RCC_OscConfig+0x270>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7fe fe98 	bl	8000e24 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f8:	f7fe fe94 	bl	8000e24 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e180      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d03a      	beq.n	8002198 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d019      	beq.n	800215e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_RCC_OscConfig+0x274>)
 800212c:	2201      	movs	r2, #1
 800212e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002130:	f7fe fe78 	bl	8000e24 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002138:	f7fe fe74 	bl	8000e24 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e160      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002156:	2001      	movs	r0, #1
 8002158:	f000 face 	bl	80026f8 <RCC_Delay>
 800215c:	e01c      	b.n	8002198 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_RCC_OscConfig+0x274>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7fe fe5e 	bl	8000e24 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216a:	e00f      	b.n	800218c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216c:	f7fe fe5a 	bl	8000e24 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d908      	bls.n	800218c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e146      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	42420000 	.word	0x42420000
 8002188:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218c:	4b92      	ldr	r3, [pc, #584]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1e9      	bne.n	800216c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80a6 	beq.w	80022f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021aa:	4b8b      	ldr	r3, [pc, #556]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10d      	bne.n	80021d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	4b88      	ldr	r3, [pc, #544]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4a87      	ldr	r2, [pc, #540]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c0:	61d3      	str	r3, [r2, #28]
 80021c2:	4b85      	ldr	r3, [pc, #532]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ce:	2301      	movs	r3, #1
 80021d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d2:	4b82      	ldr	r3, [pc, #520]	; (80023dc <HAL_RCC_OscConfig+0x4c8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d118      	bne.n	8002210 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021de:	4b7f      	ldr	r3, [pc, #508]	; (80023dc <HAL_RCC_OscConfig+0x4c8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a7e      	ldr	r2, [pc, #504]	; (80023dc <HAL_RCC_OscConfig+0x4c8>)
 80021e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ea:	f7fe fe1b 	bl	8000e24 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f2:	f7fe fe17 	bl	8000e24 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b64      	cmp	r3, #100	; 0x64
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e103      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	4b75      	ldr	r3, [pc, #468]	; (80023dc <HAL_RCC_OscConfig+0x4c8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d106      	bne.n	8002226 <HAL_RCC_OscConfig+0x312>
 8002218:	4b6f      	ldr	r3, [pc, #444]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a6e      	ldr	r2, [pc, #440]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6213      	str	r3, [r2, #32]
 8002224:	e02d      	b.n	8002282 <HAL_RCC_OscConfig+0x36e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0x334>
 800222e:	4b6a      	ldr	r3, [pc, #424]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4a69      	ldr	r2, [pc, #420]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	6213      	str	r3, [r2, #32]
 800223a:	4b67      	ldr	r3, [pc, #412]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4a66      	ldr	r2, [pc, #408]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	f023 0304 	bic.w	r3, r3, #4
 8002244:	6213      	str	r3, [r2, #32]
 8002246:	e01c      	b.n	8002282 <HAL_RCC_OscConfig+0x36e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b05      	cmp	r3, #5
 800224e:	d10c      	bne.n	800226a <HAL_RCC_OscConfig+0x356>
 8002250:	4b61      	ldr	r3, [pc, #388]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4a60      	ldr	r2, [pc, #384]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	f043 0304 	orr.w	r3, r3, #4
 800225a:	6213      	str	r3, [r2, #32]
 800225c:	4b5e      	ldr	r3, [pc, #376]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4a5d      	ldr	r2, [pc, #372]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6213      	str	r3, [r2, #32]
 8002268:	e00b      	b.n	8002282 <HAL_RCC_OscConfig+0x36e>
 800226a:	4b5b      	ldr	r3, [pc, #364]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4a5a      	ldr	r2, [pc, #360]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	6213      	str	r3, [r2, #32]
 8002276:	4b58      	ldr	r3, [pc, #352]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a57      	ldr	r2, [pc, #348]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	f023 0304 	bic.w	r3, r3, #4
 8002280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d015      	beq.n	80022b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228a:	f7fe fdcb 	bl	8000e24 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002290:	e00a      	b.n	80022a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002292:	f7fe fdc7 	bl	8000e24 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e0b1      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a8:	4b4b      	ldr	r3, [pc, #300]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0ee      	beq.n	8002292 <HAL_RCC_OscConfig+0x37e>
 80022b4:	e014      	b.n	80022e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b6:	f7fe fdb5 	bl	8000e24 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7fe fdb1 	bl	8000e24 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e09b      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d4:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1ee      	bne.n	80022be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022e0:	7dfb      	ldrb	r3, [r7, #23]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d105      	bne.n	80022f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e6:	4b3c      	ldr	r3, [pc, #240]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	4a3b      	ldr	r2, [pc, #236]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 8087 	beq.w	800240a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022fc:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b08      	cmp	r3, #8
 8002306:	d061      	beq.n	80023cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d146      	bne.n	800239e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002310:	4b33      	ldr	r3, [pc, #204]	; (80023e0 <HAL_RCC_OscConfig+0x4cc>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7fe fd85 	bl	8000e24 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7fe fd81 	bl	8000e24 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e06d      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002330:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002344:	d108      	bne.n	8002358 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4921      	ldr	r1, [pc, #132]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002358:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a19      	ldr	r1, [r3, #32]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	430b      	orrs	r3, r1
 800236a:	491b      	ldr	r1, [pc, #108]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <HAL_RCC_OscConfig+0x4cc>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7fe fd55 	bl	8000e24 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237e:	f7fe fd51 	bl	8000e24 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e03d      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x46a>
 800239c:	e035      	b.n	800240a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_RCC_OscConfig+0x4cc>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fd3e 	bl	8000e24 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe fd3a 	bl	8000e24 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e026      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x498>
 80023ca:	e01e      	b.n	800240a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e019      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
 80023e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_OscConfig+0x500>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d001      	beq.n	800240a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000

08002418 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0d0      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b6a      	ldr	r3, [pc, #424]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d910      	bls.n	800245c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b67      	ldr	r3, [pc, #412]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	4965      	ldr	r1, [pc, #404]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b63      	ldr	r3, [pc, #396]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0b8      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002474:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a58      	ldr	r2, [pc, #352]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800247e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800248c:	4b53      	ldr	r3, [pc, #332]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a52      	ldr	r2, [pc, #328]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002496:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002498:	4b50      	ldr	r3, [pc, #320]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	494d      	ldr	r1, [pc, #308]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d040      	beq.n	8002538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d115      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e07f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d6:	4b41      	ldr	r3, [pc, #260]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e073      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	4b3d      	ldr	r3, [pc, #244]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e06b      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4b39      	ldr	r3, [pc, #228]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4936      	ldr	r1, [pc, #216]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002508:	f7fe fc8c 	bl	8000e24 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7fe fc88 	bl	8000e24 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e053      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 020c 	and.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d1eb      	bne.n	8002510 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d210      	bcs.n	8002568 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 0207 	bic.w	r2, r3, #7
 800254e:	4922      	ldr	r1, [pc, #136]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e032      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4916      	ldr	r1, [pc, #88]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	490e      	ldr	r1, [pc, #56]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025a6:	f000 f821 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80025aa:	4602      	mov	r2, r0
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	490a      	ldr	r1, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025b8:	5ccb      	ldrb	r3, [r1, r3]
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	4a09      	ldr	r2, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x1cc>)
 80025c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_RCC_ClockConfig+0x1d0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fbea 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08005708 	.word	0x08005708
 80025e4:	20000004 	.word	0x20000004
 80025e8:	20000008 	.word	0x20000008

080025ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <HAL_RCC_GetSysClockFreq+0x94>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b04      	cmp	r3, #4
 8002614:	d002      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x30>
 8002616:	2b08      	cmp	r3, #8
 8002618:	d003      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x36>
 800261a:	e027      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_RCC_GetSysClockFreq+0x98>)
 800261e:	613b      	str	r3, [r7, #16]
      break;
 8002620:	e027      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	0c9b      	lsrs	r3, r3, #18
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	4a17      	ldr	r2, [pc, #92]	; (8002688 <HAL_RCC_GetSysClockFreq+0x9c>)
 800262c:	5cd3      	ldrb	r3, [r2, r3]
 800262e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d010      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_RCC_GetSysClockFreq+0x94>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	0c5b      	lsrs	r3, r3, #17
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	4a11      	ldr	r2, [pc, #68]	; (800268c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002646:	5cd3      	ldrb	r3, [r2, r3]
 8002648:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <HAL_RCC_GetSysClockFreq+0x98>)
 800264e:	fb03 f202 	mul.w	r2, r3, r2
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e004      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a0c      	ldr	r2, [pc, #48]	; (8002690 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002660:	fb02 f303 	mul.w	r3, r2, r3
 8002664:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	613b      	str	r3, [r7, #16]
      break;
 800266a:	e002      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetSysClockFreq+0x98>)
 800266e:	613b      	str	r3, [r7, #16]
      break;
 8002670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002672:	693b      	ldr	r3, [r7, #16]
}
 8002674:	4618      	mov	r0, r3
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	007a1200 	.word	0x007a1200
 8002688:	08005720 	.word	0x08005720
 800268c:	08005730 	.word	0x08005730
 8002690:	003d0900 	.word	0x003d0900

08002694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b02      	ldr	r3, [pc, #8]	; (80026a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	20000004 	.word	0x20000004

080026a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026ac:	f7ff fff2 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4903      	ldr	r1, [pc, #12]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08005718 	.word	0x08005718

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d4:	f7ff ffde 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	0adb      	lsrs	r3, r3, #11
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08005718 	.word	0x08005718

080026f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <RCC_Delay+0x34>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <RCC_Delay+0x38>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0a5b      	lsrs	r3, r3, #9
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002714:	bf00      	nop
  }
  while (Delay --);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	60fa      	str	r2, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f9      	bne.n	8002714 <RCC_Delay+0x1c>
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	20000004 	.word	0x20000004
 8002730:	10624dd3 	.word	0x10624dd3

08002734 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e093      	b.n	8002870 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d106      	bne.n	8002762 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7fe f9f7 	bl	8000b50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2202      	movs	r2, #2
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002778:	f023 0307 	bic.w	r3, r3, #7
 800277c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	4619      	mov	r1, r3
 8002788:	4610      	mov	r0, r2
 800278a:	f000 f903 	bl	8002994 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b6:	f023 0303 	bic.w	r3, r3, #3
 80027ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	4313      	orrs	r3, r2
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80027d4:	f023 030c 	bic.w	r3, r3, #12
 80027d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	4313      	orrs	r3, r2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	011a      	lsls	r2, r3, #4
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	031b      	lsls	r3, r3, #12
 8002804:	4313      	orrs	r3, r2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002812:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	4313      	orrs	r3, r2
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002888:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002890:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002898:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80028a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d110      	bne.n	80028ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d102      	bne.n	80028b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80028ae:	7b7b      	ldrb	r3, [r7, #13]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d001      	beq.n	80028b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e069      	b.n	800298c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c8:	e031      	b.n	800292e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d110      	bne.n	80028f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80028d0:	7bbb      	ldrb	r3, [r7, #14]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d102      	bne.n	80028dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80028d6:	7b3b      	ldrb	r3, [r7, #12]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d001      	beq.n	80028e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e055      	b.n	800298c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028f0:	e01d      	b.n	800292e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d108      	bne.n	800290a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80028f8:	7bbb      	ldrb	r3, [r7, #14]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d105      	bne.n	800290a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80028fe:	7b7b      	ldrb	r3, [r7, #13]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d102      	bne.n	800290a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002904:	7b3b      	ldrb	r3, [r7, #12]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d001      	beq.n	800290e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e03e      	b.n	800298c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2202      	movs	r2, #2
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2202      	movs	r2, #2
 800291a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2202      	movs	r2, #2
 8002922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2202      	movs	r2, #2
 800292a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_TIM_Encoder_Start+0xc4>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b04      	cmp	r3, #4
 8002938:	d008      	beq.n	800294c <HAL_TIM_Encoder_Start+0xd4>
 800293a:	e00f      	b.n	800295c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2201      	movs	r2, #1
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f887 	bl	8002a58 <TIM_CCxChannelCmd>
      break;
 800294a:	e016      	b.n	800297a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	2104      	movs	r1, #4
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f87f 	bl	8002a58 <TIM_CCxChannelCmd>
      break;
 800295a:	e00e      	b.n	800297a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2201      	movs	r2, #1
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f000 f877 	bl	8002a58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2201      	movs	r2, #1
 8002970:	2104      	movs	r1, #4
 8002972:	4618      	mov	r0, r3
 8002974:	f000 f870 	bl	8002a58 <TIM_CCxChannelCmd>
      break;
 8002978:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0201 	orr.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a29      	ldr	r2, [pc, #164]	; (8002a4c <TIM_Base_SetConfig+0xb8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00b      	beq.n	80029c4 <TIM_Base_SetConfig+0x30>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b2:	d007      	beq.n	80029c4 <TIM_Base_SetConfig+0x30>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <TIM_Base_SetConfig+0xbc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_Base_SetConfig+0x30>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <TIM_Base_SetConfig+0xc0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d108      	bne.n	80029d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <TIM_Base_SetConfig+0xb8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <TIM_Base_SetConfig+0x62>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e4:	d007      	beq.n	80029f6 <TIM_Base_SetConfig+0x62>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <TIM_Base_SetConfig+0xbc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_Base_SetConfig+0x62>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <TIM_Base_SetConfig+0xc0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d108      	bne.n	8002a08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <TIM_Base_SetConfig+0xb8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d103      	bne.n	8002a3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	615a      	str	r2, [r3, #20]
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40000800 	.word	0x40000800

08002a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a1a      	ldr	r2, [r3, #32]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a1a      	ldr	r2, [r3, #32]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	431a      	orrs	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	621a      	str	r2, [r3, #32]
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e046      	b.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00e      	beq.n	8002b1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b04:	d009      	beq.n	8002b1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a10      	ldr	r2, [pc, #64]	; (8002b58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10c      	bne.n	8002b34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40000800 	.word	0x40000800

08002b5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e042      	b.n	8002bf4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe f820 	bl	8000bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2224      	movs	r2, #36	; 0x24
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f91d 	bl	8002de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d16d      	bne.n	8002cf8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_UART_Transmit+0x2c>
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e066      	b.n	8002cfa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2221      	movs	r2, #33	; 0x21
 8002c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c3a:	f7fe f8f3 	bl	8000e24 <HAL_GetTick>
 8002c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c54:	d108      	bne.n	8002c68 <HAL_UART_Transmit+0x6c>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d104      	bne.n	8002c68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	e003      	b.n	8002c70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c70:	e02a      	b.n	8002cc8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2180      	movs	r1, #128	; 0x80
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f840 	bl	8002d02 <UART_WaitOnFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e036      	b.n	8002cfa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10b      	bne.n	8002caa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	e007      	b.n	8002cba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1cf      	bne.n	8002c72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2140      	movs	r1, #64	; 0x40
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f810 	bl	8002d02 <UART_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e006      	b.n	8002cfa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e000      	b.n	8002cfa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002cf8:	2302      	movs	r3, #2
  }
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b090      	sub	sp, #64	; 0x40
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d12:	e050      	b.n	8002db6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d04c      	beq.n	8002db6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d22:	f7fe f87f 	bl	8000e24 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d241      	bcs.n	8002db6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	330c      	adds	r3, #12
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	e853 3f00 	ldrex	r3, [r3]
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	330c      	adds	r3, #12
 8002d50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d52:	637a      	str	r2, [r7, #52]	; 0x34
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d5a:	e841 2300 	strex	r3, r2, [r1]
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1e5      	bne.n	8002d32 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3314      	adds	r3, #20
 8002d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	e853 3f00 	ldrex	r3, [r3]
 8002d74:	613b      	str	r3, [r7, #16]
   return(result);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3314      	adds	r3, #20
 8002d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d86:	623a      	str	r2, [r7, #32]
 8002d88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8a:	69f9      	ldr	r1, [r7, #28]
 8002d8c:	6a3a      	ldr	r2, [r7, #32]
 8002d8e:	e841 2300 	strex	r3, r2, [r1]
 8002d92:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e5      	bne.n	8002d66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e00f      	b.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d09f      	beq.n	8002d14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3740      	adds	r7, #64	; 0x40
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e1a:	f023 030c 	bic.w	r3, r3, #12
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a2c      	ldr	r2, [pc, #176]	; (8002ef4 <UART_SetConfig+0x114>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d103      	bne.n	8002e50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e48:	f7ff fc42 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	e002      	b.n	8002e56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e50:	f7ff fc2a 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8002e54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009a      	lsls	r2, r3, #2
 8002e60:	441a      	add	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <UART_SetConfig+0x118>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	0119      	lsls	r1, r3, #4
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009a      	lsls	r2, r3, #2
 8002e80:	441a      	add	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <UART_SetConfig+0x118>)
 8002e8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2064      	movs	r0, #100	; 0x64
 8002e96:	fb00 f303 	mul.w	r3, r0, r3
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	3332      	adds	r3, #50	; 0x32
 8002ea0:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <UART_SetConfig+0x118>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eac:	4419      	add	r1, r3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009a      	lsls	r2, r3, #2
 8002eb8:	441a      	add	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <UART_SetConfig+0x118>)
 8002ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	2064      	movs	r0, #100	; 0x64
 8002ece:	fb00 f303 	mul.w	r3, r0, r3
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	3332      	adds	r3, #50	; 0x32
 8002ed8:	4a07      	ldr	r2, [pc, #28]	; (8002ef8 <UART_SetConfig+0x118>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	f003 020f 	and.w	r2, r3, #15
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	440a      	add	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40013800 	.word	0x40013800
 8002ef8:	51eb851f 	.word	0x51eb851f

08002efc <siprintf>:
 8002efc:	b40e      	push	{r1, r2, r3}
 8002efe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f02:	b500      	push	{lr}
 8002f04:	b09c      	sub	sp, #112	; 0x70
 8002f06:	ab1d      	add	r3, sp, #116	; 0x74
 8002f08:	9002      	str	r0, [sp, #8]
 8002f0a:	9006      	str	r0, [sp, #24]
 8002f0c:	9107      	str	r1, [sp, #28]
 8002f0e:	9104      	str	r1, [sp, #16]
 8002f10:	4808      	ldr	r0, [pc, #32]	; (8002f34 <siprintf+0x38>)
 8002f12:	4909      	ldr	r1, [pc, #36]	; (8002f38 <siprintf+0x3c>)
 8002f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f18:	9105      	str	r1, [sp, #20]
 8002f1a:	6800      	ldr	r0, [r0, #0]
 8002f1c:	a902      	add	r1, sp, #8
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	f000 f98e 	bl	8003240 <_svfiprintf_r>
 8002f24:	2200      	movs	r2, #0
 8002f26:	9b02      	ldr	r3, [sp, #8]
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	b01c      	add	sp, #112	; 0x70
 8002f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f30:	b003      	add	sp, #12
 8002f32:	4770      	bx	lr
 8002f34:	2000005c 	.word	0x2000005c
 8002f38:	ffff0208 	.word	0xffff0208

08002f3c <memset>:
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4402      	add	r2, r0
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d100      	bne.n	8002f46 <memset+0xa>
 8002f44:	4770      	bx	lr
 8002f46:	f803 1b01 	strb.w	r1, [r3], #1
 8002f4a:	e7f9      	b.n	8002f40 <memset+0x4>

08002f4c <__errno>:
 8002f4c:	4b01      	ldr	r3, [pc, #4]	; (8002f54 <__errno+0x8>)
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	2000005c 	.word	0x2000005c

08002f58 <__libc_init_array>:
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	2600      	movs	r6, #0
 8002f5c:	4d0c      	ldr	r5, [pc, #48]	; (8002f90 <__libc_init_array+0x38>)
 8002f5e:	4c0d      	ldr	r4, [pc, #52]	; (8002f94 <__libc_init_array+0x3c>)
 8002f60:	1b64      	subs	r4, r4, r5
 8002f62:	10a4      	asrs	r4, r4, #2
 8002f64:	42a6      	cmp	r6, r4
 8002f66:	d109      	bne.n	8002f7c <__libc_init_array+0x24>
 8002f68:	f000 fc7a 	bl	8003860 <_init>
 8002f6c:	2600      	movs	r6, #0
 8002f6e:	4d0a      	ldr	r5, [pc, #40]	; (8002f98 <__libc_init_array+0x40>)
 8002f70:	4c0a      	ldr	r4, [pc, #40]	; (8002f9c <__libc_init_array+0x44>)
 8002f72:	1b64      	subs	r4, r4, r5
 8002f74:	10a4      	asrs	r4, r4, #2
 8002f76:	42a6      	cmp	r6, r4
 8002f78:	d105      	bne.n	8002f86 <__libc_init_array+0x2e>
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
 8002f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f80:	4798      	blx	r3
 8002f82:	3601      	adds	r6, #1
 8002f84:	e7ee      	b.n	8002f64 <__libc_init_array+0xc>
 8002f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f8a:	4798      	blx	r3
 8002f8c:	3601      	adds	r6, #1
 8002f8e:	e7f2      	b.n	8002f76 <__libc_init_array+0x1e>
 8002f90:	08005768 	.word	0x08005768
 8002f94:	08005768 	.word	0x08005768
 8002f98:	08005768 	.word	0x08005768
 8002f9c:	0800576c 	.word	0x0800576c

08002fa0 <__retarget_lock_acquire_recursive>:
 8002fa0:	4770      	bx	lr

08002fa2 <__retarget_lock_release_recursive>:
 8002fa2:	4770      	bx	lr

08002fa4 <_free_r>:
 8002fa4:	b538      	push	{r3, r4, r5, lr}
 8002fa6:	4605      	mov	r5, r0
 8002fa8:	2900      	cmp	r1, #0
 8002faa:	d040      	beq.n	800302e <_free_r+0x8a>
 8002fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fb0:	1f0c      	subs	r4, r1, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bfb8      	it	lt
 8002fb6:	18e4      	addlt	r4, r4, r3
 8002fb8:	f000 f8dc 	bl	8003174 <__malloc_lock>
 8002fbc:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <_free_r+0x8c>)
 8002fbe:	6813      	ldr	r3, [r2, #0]
 8002fc0:	b933      	cbnz	r3, 8002fd0 <_free_r+0x2c>
 8002fc2:	6063      	str	r3, [r4, #4]
 8002fc4:	6014      	str	r4, [r2, #0]
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fcc:	f000 b8d8 	b.w	8003180 <__malloc_unlock>
 8002fd0:	42a3      	cmp	r3, r4
 8002fd2:	d908      	bls.n	8002fe6 <_free_r+0x42>
 8002fd4:	6820      	ldr	r0, [r4, #0]
 8002fd6:	1821      	adds	r1, r4, r0
 8002fd8:	428b      	cmp	r3, r1
 8002fda:	bf01      	itttt	eq
 8002fdc:	6819      	ldreq	r1, [r3, #0]
 8002fde:	685b      	ldreq	r3, [r3, #4]
 8002fe0:	1809      	addeq	r1, r1, r0
 8002fe2:	6021      	streq	r1, [r4, #0]
 8002fe4:	e7ed      	b.n	8002fc2 <_free_r+0x1e>
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	b10b      	cbz	r3, 8002ff0 <_free_r+0x4c>
 8002fec:	42a3      	cmp	r3, r4
 8002fee:	d9fa      	bls.n	8002fe6 <_free_r+0x42>
 8002ff0:	6811      	ldr	r1, [r2, #0]
 8002ff2:	1850      	adds	r0, r2, r1
 8002ff4:	42a0      	cmp	r0, r4
 8002ff6:	d10b      	bne.n	8003010 <_free_r+0x6c>
 8002ff8:	6820      	ldr	r0, [r4, #0]
 8002ffa:	4401      	add	r1, r0
 8002ffc:	1850      	adds	r0, r2, r1
 8002ffe:	4283      	cmp	r3, r0
 8003000:	6011      	str	r1, [r2, #0]
 8003002:	d1e0      	bne.n	8002fc6 <_free_r+0x22>
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4408      	add	r0, r1
 800300a:	6010      	str	r0, [r2, #0]
 800300c:	6053      	str	r3, [r2, #4]
 800300e:	e7da      	b.n	8002fc6 <_free_r+0x22>
 8003010:	d902      	bls.n	8003018 <_free_r+0x74>
 8003012:	230c      	movs	r3, #12
 8003014:	602b      	str	r3, [r5, #0]
 8003016:	e7d6      	b.n	8002fc6 <_free_r+0x22>
 8003018:	6820      	ldr	r0, [r4, #0]
 800301a:	1821      	adds	r1, r4, r0
 800301c:	428b      	cmp	r3, r1
 800301e:	bf01      	itttt	eq
 8003020:	6819      	ldreq	r1, [r3, #0]
 8003022:	685b      	ldreq	r3, [r3, #4]
 8003024:	1809      	addeq	r1, r1, r0
 8003026:	6021      	streq	r1, [r4, #0]
 8003028:	6063      	str	r3, [r4, #4]
 800302a:	6054      	str	r4, [r2, #4]
 800302c:	e7cb      	b.n	8002fc6 <_free_r+0x22>
 800302e:	bd38      	pop	{r3, r4, r5, pc}
 8003030:	200006bc 	.word	0x200006bc

08003034 <sbrk_aligned>:
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	4e0e      	ldr	r6, [pc, #56]	; (8003070 <sbrk_aligned+0x3c>)
 8003038:	460c      	mov	r4, r1
 800303a:	6831      	ldr	r1, [r6, #0]
 800303c:	4605      	mov	r5, r0
 800303e:	b911      	cbnz	r1, 8003046 <sbrk_aligned+0x12>
 8003040:	f000 fbaa 	bl	8003798 <_sbrk_r>
 8003044:	6030      	str	r0, [r6, #0]
 8003046:	4621      	mov	r1, r4
 8003048:	4628      	mov	r0, r5
 800304a:	f000 fba5 	bl	8003798 <_sbrk_r>
 800304e:	1c43      	adds	r3, r0, #1
 8003050:	d00a      	beq.n	8003068 <sbrk_aligned+0x34>
 8003052:	1cc4      	adds	r4, r0, #3
 8003054:	f024 0403 	bic.w	r4, r4, #3
 8003058:	42a0      	cmp	r0, r4
 800305a:	d007      	beq.n	800306c <sbrk_aligned+0x38>
 800305c:	1a21      	subs	r1, r4, r0
 800305e:	4628      	mov	r0, r5
 8003060:	f000 fb9a 	bl	8003798 <_sbrk_r>
 8003064:	3001      	adds	r0, #1
 8003066:	d101      	bne.n	800306c <sbrk_aligned+0x38>
 8003068:	f04f 34ff 	mov.w	r4, #4294967295
 800306c:	4620      	mov	r0, r4
 800306e:	bd70      	pop	{r4, r5, r6, pc}
 8003070:	200006c0 	.word	0x200006c0

08003074 <_malloc_r>:
 8003074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003078:	1ccd      	adds	r5, r1, #3
 800307a:	f025 0503 	bic.w	r5, r5, #3
 800307e:	3508      	adds	r5, #8
 8003080:	2d0c      	cmp	r5, #12
 8003082:	bf38      	it	cc
 8003084:	250c      	movcc	r5, #12
 8003086:	2d00      	cmp	r5, #0
 8003088:	4607      	mov	r7, r0
 800308a:	db01      	blt.n	8003090 <_malloc_r+0x1c>
 800308c:	42a9      	cmp	r1, r5
 800308e:	d905      	bls.n	800309c <_malloc_r+0x28>
 8003090:	230c      	movs	r3, #12
 8003092:	2600      	movs	r6, #0
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	4630      	mov	r0, r6
 8003098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800309c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003170 <_malloc_r+0xfc>
 80030a0:	f000 f868 	bl	8003174 <__malloc_lock>
 80030a4:	f8d8 3000 	ldr.w	r3, [r8]
 80030a8:	461c      	mov	r4, r3
 80030aa:	bb5c      	cbnz	r4, 8003104 <_malloc_r+0x90>
 80030ac:	4629      	mov	r1, r5
 80030ae:	4638      	mov	r0, r7
 80030b0:	f7ff ffc0 	bl	8003034 <sbrk_aligned>
 80030b4:	1c43      	adds	r3, r0, #1
 80030b6:	4604      	mov	r4, r0
 80030b8:	d155      	bne.n	8003166 <_malloc_r+0xf2>
 80030ba:	f8d8 4000 	ldr.w	r4, [r8]
 80030be:	4626      	mov	r6, r4
 80030c0:	2e00      	cmp	r6, #0
 80030c2:	d145      	bne.n	8003150 <_malloc_r+0xdc>
 80030c4:	2c00      	cmp	r4, #0
 80030c6:	d048      	beq.n	800315a <_malloc_r+0xe6>
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	4631      	mov	r1, r6
 80030cc:	4638      	mov	r0, r7
 80030ce:	eb04 0903 	add.w	r9, r4, r3
 80030d2:	f000 fb61 	bl	8003798 <_sbrk_r>
 80030d6:	4581      	cmp	r9, r0
 80030d8:	d13f      	bne.n	800315a <_malloc_r+0xe6>
 80030da:	6821      	ldr	r1, [r4, #0]
 80030dc:	4638      	mov	r0, r7
 80030de:	1a6d      	subs	r5, r5, r1
 80030e0:	4629      	mov	r1, r5
 80030e2:	f7ff ffa7 	bl	8003034 <sbrk_aligned>
 80030e6:	3001      	adds	r0, #1
 80030e8:	d037      	beq.n	800315a <_malloc_r+0xe6>
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	442b      	add	r3, r5
 80030ee:	6023      	str	r3, [r4, #0]
 80030f0:	f8d8 3000 	ldr.w	r3, [r8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d038      	beq.n	800316a <_malloc_r+0xf6>
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	42a2      	cmp	r2, r4
 80030fc:	d12b      	bne.n	8003156 <_malloc_r+0xe2>
 80030fe:	2200      	movs	r2, #0
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	e00f      	b.n	8003124 <_malloc_r+0xb0>
 8003104:	6822      	ldr	r2, [r4, #0]
 8003106:	1b52      	subs	r2, r2, r5
 8003108:	d41f      	bmi.n	800314a <_malloc_r+0xd6>
 800310a:	2a0b      	cmp	r2, #11
 800310c:	d917      	bls.n	800313e <_malloc_r+0xca>
 800310e:	1961      	adds	r1, r4, r5
 8003110:	42a3      	cmp	r3, r4
 8003112:	6025      	str	r5, [r4, #0]
 8003114:	bf18      	it	ne
 8003116:	6059      	strne	r1, [r3, #4]
 8003118:	6863      	ldr	r3, [r4, #4]
 800311a:	bf08      	it	eq
 800311c:	f8c8 1000 	streq.w	r1, [r8]
 8003120:	5162      	str	r2, [r4, r5]
 8003122:	604b      	str	r3, [r1, #4]
 8003124:	4638      	mov	r0, r7
 8003126:	f104 060b 	add.w	r6, r4, #11
 800312a:	f000 f829 	bl	8003180 <__malloc_unlock>
 800312e:	f026 0607 	bic.w	r6, r6, #7
 8003132:	1d23      	adds	r3, r4, #4
 8003134:	1af2      	subs	r2, r6, r3
 8003136:	d0ae      	beq.n	8003096 <_malloc_r+0x22>
 8003138:	1b9b      	subs	r3, r3, r6
 800313a:	50a3      	str	r3, [r4, r2]
 800313c:	e7ab      	b.n	8003096 <_malloc_r+0x22>
 800313e:	42a3      	cmp	r3, r4
 8003140:	6862      	ldr	r2, [r4, #4]
 8003142:	d1dd      	bne.n	8003100 <_malloc_r+0x8c>
 8003144:	f8c8 2000 	str.w	r2, [r8]
 8003148:	e7ec      	b.n	8003124 <_malloc_r+0xb0>
 800314a:	4623      	mov	r3, r4
 800314c:	6864      	ldr	r4, [r4, #4]
 800314e:	e7ac      	b.n	80030aa <_malloc_r+0x36>
 8003150:	4634      	mov	r4, r6
 8003152:	6876      	ldr	r6, [r6, #4]
 8003154:	e7b4      	b.n	80030c0 <_malloc_r+0x4c>
 8003156:	4613      	mov	r3, r2
 8003158:	e7cc      	b.n	80030f4 <_malloc_r+0x80>
 800315a:	230c      	movs	r3, #12
 800315c:	4638      	mov	r0, r7
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	f000 f80e 	bl	8003180 <__malloc_unlock>
 8003164:	e797      	b.n	8003096 <_malloc_r+0x22>
 8003166:	6025      	str	r5, [r4, #0]
 8003168:	e7dc      	b.n	8003124 <_malloc_r+0xb0>
 800316a:	605b      	str	r3, [r3, #4]
 800316c:	deff      	udf	#255	; 0xff
 800316e:	bf00      	nop
 8003170:	200006bc 	.word	0x200006bc

08003174 <__malloc_lock>:
 8003174:	4801      	ldr	r0, [pc, #4]	; (800317c <__malloc_lock+0x8>)
 8003176:	f7ff bf13 	b.w	8002fa0 <__retarget_lock_acquire_recursive>
 800317a:	bf00      	nop
 800317c:	200006b8 	.word	0x200006b8

08003180 <__malloc_unlock>:
 8003180:	4801      	ldr	r0, [pc, #4]	; (8003188 <__malloc_unlock+0x8>)
 8003182:	f7ff bf0e 	b.w	8002fa2 <__retarget_lock_release_recursive>
 8003186:	bf00      	nop
 8003188:	200006b8 	.word	0x200006b8

0800318c <__ssputs_r>:
 800318c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003190:	461f      	mov	r7, r3
 8003192:	688e      	ldr	r6, [r1, #8]
 8003194:	4682      	mov	sl, r0
 8003196:	42be      	cmp	r6, r7
 8003198:	460c      	mov	r4, r1
 800319a:	4690      	mov	r8, r2
 800319c:	680b      	ldr	r3, [r1, #0]
 800319e:	d82c      	bhi.n	80031fa <__ssputs_r+0x6e>
 80031a0:	898a      	ldrh	r2, [r1, #12]
 80031a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031a6:	d026      	beq.n	80031f6 <__ssputs_r+0x6a>
 80031a8:	6965      	ldr	r5, [r4, #20]
 80031aa:	6909      	ldr	r1, [r1, #16]
 80031ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031b0:	eba3 0901 	sub.w	r9, r3, r1
 80031b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031b8:	1c7b      	adds	r3, r7, #1
 80031ba:	444b      	add	r3, r9
 80031bc:	106d      	asrs	r5, r5, #1
 80031be:	429d      	cmp	r5, r3
 80031c0:	bf38      	it	cc
 80031c2:	461d      	movcc	r5, r3
 80031c4:	0553      	lsls	r3, r2, #21
 80031c6:	d527      	bpl.n	8003218 <__ssputs_r+0x8c>
 80031c8:	4629      	mov	r1, r5
 80031ca:	f7ff ff53 	bl	8003074 <_malloc_r>
 80031ce:	4606      	mov	r6, r0
 80031d0:	b360      	cbz	r0, 800322c <__ssputs_r+0xa0>
 80031d2:	464a      	mov	r2, r9
 80031d4:	6921      	ldr	r1, [r4, #16]
 80031d6:	f000 fafd 	bl	80037d4 <memcpy>
 80031da:	89a3      	ldrh	r3, [r4, #12]
 80031dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e4:	81a3      	strh	r3, [r4, #12]
 80031e6:	6126      	str	r6, [r4, #16]
 80031e8:	444e      	add	r6, r9
 80031ea:	6026      	str	r6, [r4, #0]
 80031ec:	463e      	mov	r6, r7
 80031ee:	6165      	str	r5, [r4, #20]
 80031f0:	eba5 0509 	sub.w	r5, r5, r9
 80031f4:	60a5      	str	r5, [r4, #8]
 80031f6:	42be      	cmp	r6, r7
 80031f8:	d900      	bls.n	80031fc <__ssputs_r+0x70>
 80031fa:	463e      	mov	r6, r7
 80031fc:	4632      	mov	r2, r6
 80031fe:	4641      	mov	r1, r8
 8003200:	6820      	ldr	r0, [r4, #0]
 8003202:	f000 faaf 	bl	8003764 <memmove>
 8003206:	2000      	movs	r0, #0
 8003208:	68a3      	ldr	r3, [r4, #8]
 800320a:	1b9b      	subs	r3, r3, r6
 800320c:	60a3      	str	r3, [r4, #8]
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	4433      	add	r3, r6
 8003212:	6023      	str	r3, [r4, #0]
 8003214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003218:	462a      	mov	r2, r5
 800321a:	f000 fae9 	bl	80037f0 <_realloc_r>
 800321e:	4606      	mov	r6, r0
 8003220:	2800      	cmp	r0, #0
 8003222:	d1e0      	bne.n	80031e6 <__ssputs_r+0x5a>
 8003224:	4650      	mov	r0, sl
 8003226:	6921      	ldr	r1, [r4, #16]
 8003228:	f7ff febc 	bl	8002fa4 <_free_r>
 800322c:	230c      	movs	r3, #12
 800322e:	f8ca 3000 	str.w	r3, [sl]
 8003232:	89a3      	ldrh	r3, [r4, #12]
 8003234:	f04f 30ff 	mov.w	r0, #4294967295
 8003238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800323c:	81a3      	strh	r3, [r4, #12]
 800323e:	e7e9      	b.n	8003214 <__ssputs_r+0x88>

08003240 <_svfiprintf_r>:
 8003240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003244:	4698      	mov	r8, r3
 8003246:	898b      	ldrh	r3, [r1, #12]
 8003248:	4607      	mov	r7, r0
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	460d      	mov	r5, r1
 800324e:	4614      	mov	r4, r2
 8003250:	b09d      	sub	sp, #116	; 0x74
 8003252:	d50e      	bpl.n	8003272 <_svfiprintf_r+0x32>
 8003254:	690b      	ldr	r3, [r1, #16]
 8003256:	b963      	cbnz	r3, 8003272 <_svfiprintf_r+0x32>
 8003258:	2140      	movs	r1, #64	; 0x40
 800325a:	f7ff ff0b 	bl	8003074 <_malloc_r>
 800325e:	6028      	str	r0, [r5, #0]
 8003260:	6128      	str	r0, [r5, #16]
 8003262:	b920      	cbnz	r0, 800326e <_svfiprintf_r+0x2e>
 8003264:	230c      	movs	r3, #12
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	e0d0      	b.n	8003410 <_svfiprintf_r+0x1d0>
 800326e:	2340      	movs	r3, #64	; 0x40
 8003270:	616b      	str	r3, [r5, #20]
 8003272:	2300      	movs	r3, #0
 8003274:	9309      	str	r3, [sp, #36]	; 0x24
 8003276:	2320      	movs	r3, #32
 8003278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800327c:	2330      	movs	r3, #48	; 0x30
 800327e:	f04f 0901 	mov.w	r9, #1
 8003282:	f8cd 800c 	str.w	r8, [sp, #12]
 8003286:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003428 <_svfiprintf_r+0x1e8>
 800328a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800328e:	4623      	mov	r3, r4
 8003290:	469a      	mov	sl, r3
 8003292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003296:	b10a      	cbz	r2, 800329c <_svfiprintf_r+0x5c>
 8003298:	2a25      	cmp	r2, #37	; 0x25
 800329a:	d1f9      	bne.n	8003290 <_svfiprintf_r+0x50>
 800329c:	ebba 0b04 	subs.w	fp, sl, r4
 80032a0:	d00b      	beq.n	80032ba <_svfiprintf_r+0x7a>
 80032a2:	465b      	mov	r3, fp
 80032a4:	4622      	mov	r2, r4
 80032a6:	4629      	mov	r1, r5
 80032a8:	4638      	mov	r0, r7
 80032aa:	f7ff ff6f 	bl	800318c <__ssputs_r>
 80032ae:	3001      	adds	r0, #1
 80032b0:	f000 80a9 	beq.w	8003406 <_svfiprintf_r+0x1c6>
 80032b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032b6:	445a      	add	r2, fp
 80032b8:	9209      	str	r2, [sp, #36]	; 0x24
 80032ba:	f89a 3000 	ldrb.w	r3, [sl]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80a1 	beq.w	8003406 <_svfiprintf_r+0x1c6>
 80032c4:	2300      	movs	r3, #0
 80032c6:	f04f 32ff 	mov.w	r2, #4294967295
 80032ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032ce:	f10a 0a01 	add.w	sl, sl, #1
 80032d2:	9304      	str	r3, [sp, #16]
 80032d4:	9307      	str	r3, [sp, #28]
 80032d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032da:	931a      	str	r3, [sp, #104]	; 0x68
 80032dc:	4654      	mov	r4, sl
 80032de:	2205      	movs	r2, #5
 80032e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032e4:	4850      	ldr	r0, [pc, #320]	; (8003428 <_svfiprintf_r+0x1e8>)
 80032e6:	f000 fa67 	bl	80037b8 <memchr>
 80032ea:	9a04      	ldr	r2, [sp, #16]
 80032ec:	b9d8      	cbnz	r0, 8003326 <_svfiprintf_r+0xe6>
 80032ee:	06d0      	lsls	r0, r2, #27
 80032f0:	bf44      	itt	mi
 80032f2:	2320      	movmi	r3, #32
 80032f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032f8:	0711      	lsls	r1, r2, #28
 80032fa:	bf44      	itt	mi
 80032fc:	232b      	movmi	r3, #43	; 0x2b
 80032fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003302:	f89a 3000 	ldrb.w	r3, [sl]
 8003306:	2b2a      	cmp	r3, #42	; 0x2a
 8003308:	d015      	beq.n	8003336 <_svfiprintf_r+0xf6>
 800330a:	4654      	mov	r4, sl
 800330c:	2000      	movs	r0, #0
 800330e:	f04f 0c0a 	mov.w	ip, #10
 8003312:	9a07      	ldr	r2, [sp, #28]
 8003314:	4621      	mov	r1, r4
 8003316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800331a:	3b30      	subs	r3, #48	; 0x30
 800331c:	2b09      	cmp	r3, #9
 800331e:	d94d      	bls.n	80033bc <_svfiprintf_r+0x17c>
 8003320:	b1b0      	cbz	r0, 8003350 <_svfiprintf_r+0x110>
 8003322:	9207      	str	r2, [sp, #28]
 8003324:	e014      	b.n	8003350 <_svfiprintf_r+0x110>
 8003326:	eba0 0308 	sub.w	r3, r0, r8
 800332a:	fa09 f303 	lsl.w	r3, r9, r3
 800332e:	4313      	orrs	r3, r2
 8003330:	46a2      	mov	sl, r4
 8003332:	9304      	str	r3, [sp, #16]
 8003334:	e7d2      	b.n	80032dc <_svfiprintf_r+0x9c>
 8003336:	9b03      	ldr	r3, [sp, #12]
 8003338:	1d19      	adds	r1, r3, #4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	9103      	str	r1, [sp, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	bfbb      	ittet	lt
 8003342:	425b      	neglt	r3, r3
 8003344:	f042 0202 	orrlt.w	r2, r2, #2
 8003348:	9307      	strge	r3, [sp, #28]
 800334a:	9307      	strlt	r3, [sp, #28]
 800334c:	bfb8      	it	lt
 800334e:	9204      	strlt	r2, [sp, #16]
 8003350:	7823      	ldrb	r3, [r4, #0]
 8003352:	2b2e      	cmp	r3, #46	; 0x2e
 8003354:	d10c      	bne.n	8003370 <_svfiprintf_r+0x130>
 8003356:	7863      	ldrb	r3, [r4, #1]
 8003358:	2b2a      	cmp	r3, #42	; 0x2a
 800335a:	d134      	bne.n	80033c6 <_svfiprintf_r+0x186>
 800335c:	9b03      	ldr	r3, [sp, #12]
 800335e:	3402      	adds	r4, #2
 8003360:	1d1a      	adds	r2, r3, #4
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	9203      	str	r2, [sp, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	bfb8      	it	lt
 800336a:	f04f 33ff 	movlt.w	r3, #4294967295
 800336e:	9305      	str	r3, [sp, #20]
 8003370:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800342c <_svfiprintf_r+0x1ec>
 8003374:	2203      	movs	r2, #3
 8003376:	4650      	mov	r0, sl
 8003378:	7821      	ldrb	r1, [r4, #0]
 800337a:	f000 fa1d 	bl	80037b8 <memchr>
 800337e:	b138      	cbz	r0, 8003390 <_svfiprintf_r+0x150>
 8003380:	2240      	movs	r2, #64	; 0x40
 8003382:	9b04      	ldr	r3, [sp, #16]
 8003384:	eba0 000a 	sub.w	r0, r0, sl
 8003388:	4082      	lsls	r2, r0
 800338a:	4313      	orrs	r3, r2
 800338c:	3401      	adds	r4, #1
 800338e:	9304      	str	r3, [sp, #16]
 8003390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003394:	2206      	movs	r2, #6
 8003396:	4826      	ldr	r0, [pc, #152]	; (8003430 <_svfiprintf_r+0x1f0>)
 8003398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800339c:	f000 fa0c 	bl	80037b8 <memchr>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d038      	beq.n	8003416 <_svfiprintf_r+0x1d6>
 80033a4:	4b23      	ldr	r3, [pc, #140]	; (8003434 <_svfiprintf_r+0x1f4>)
 80033a6:	bb1b      	cbnz	r3, 80033f0 <_svfiprintf_r+0x1b0>
 80033a8:	9b03      	ldr	r3, [sp, #12]
 80033aa:	3307      	adds	r3, #7
 80033ac:	f023 0307 	bic.w	r3, r3, #7
 80033b0:	3308      	adds	r3, #8
 80033b2:	9303      	str	r3, [sp, #12]
 80033b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033b6:	4433      	add	r3, r6
 80033b8:	9309      	str	r3, [sp, #36]	; 0x24
 80033ba:	e768      	b.n	800328e <_svfiprintf_r+0x4e>
 80033bc:	460c      	mov	r4, r1
 80033be:	2001      	movs	r0, #1
 80033c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80033c4:	e7a6      	b.n	8003314 <_svfiprintf_r+0xd4>
 80033c6:	2300      	movs	r3, #0
 80033c8:	f04f 0c0a 	mov.w	ip, #10
 80033cc:	4619      	mov	r1, r3
 80033ce:	3401      	adds	r4, #1
 80033d0:	9305      	str	r3, [sp, #20]
 80033d2:	4620      	mov	r0, r4
 80033d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033d8:	3a30      	subs	r2, #48	; 0x30
 80033da:	2a09      	cmp	r2, #9
 80033dc:	d903      	bls.n	80033e6 <_svfiprintf_r+0x1a6>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0c6      	beq.n	8003370 <_svfiprintf_r+0x130>
 80033e2:	9105      	str	r1, [sp, #20]
 80033e4:	e7c4      	b.n	8003370 <_svfiprintf_r+0x130>
 80033e6:	4604      	mov	r4, r0
 80033e8:	2301      	movs	r3, #1
 80033ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80033ee:	e7f0      	b.n	80033d2 <_svfiprintf_r+0x192>
 80033f0:	ab03      	add	r3, sp, #12
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	462a      	mov	r2, r5
 80033f6:	4638      	mov	r0, r7
 80033f8:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <_svfiprintf_r+0x1f8>)
 80033fa:	a904      	add	r1, sp, #16
 80033fc:	f3af 8000 	nop.w
 8003400:	1c42      	adds	r2, r0, #1
 8003402:	4606      	mov	r6, r0
 8003404:	d1d6      	bne.n	80033b4 <_svfiprintf_r+0x174>
 8003406:	89ab      	ldrh	r3, [r5, #12]
 8003408:	065b      	lsls	r3, r3, #25
 800340a:	f53f af2d 	bmi.w	8003268 <_svfiprintf_r+0x28>
 800340e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003410:	b01d      	add	sp, #116	; 0x74
 8003412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003416:	ab03      	add	r3, sp, #12
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	462a      	mov	r2, r5
 800341c:	4638      	mov	r0, r7
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <_svfiprintf_r+0x1f8>)
 8003420:	a904      	add	r1, sp, #16
 8003422:	f000 f87d 	bl	8003520 <_printf_i>
 8003426:	e7eb      	b.n	8003400 <_svfiprintf_r+0x1c0>
 8003428:	08005732 	.word	0x08005732
 800342c:	08005738 	.word	0x08005738
 8003430:	0800573c 	.word	0x0800573c
 8003434:	00000000 	.word	0x00000000
 8003438:	0800318d 	.word	0x0800318d

0800343c <_printf_common>:
 800343c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003440:	4616      	mov	r6, r2
 8003442:	4699      	mov	r9, r3
 8003444:	688a      	ldr	r2, [r1, #8]
 8003446:	690b      	ldr	r3, [r1, #16]
 8003448:	4607      	mov	r7, r0
 800344a:	4293      	cmp	r3, r2
 800344c:	bfb8      	it	lt
 800344e:	4613      	movlt	r3, r2
 8003450:	6033      	str	r3, [r6, #0]
 8003452:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003456:	460c      	mov	r4, r1
 8003458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800345c:	b10a      	cbz	r2, 8003462 <_printf_common+0x26>
 800345e:	3301      	adds	r3, #1
 8003460:	6033      	str	r3, [r6, #0]
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	0699      	lsls	r1, r3, #26
 8003466:	bf42      	ittt	mi
 8003468:	6833      	ldrmi	r3, [r6, #0]
 800346a:	3302      	addmi	r3, #2
 800346c:	6033      	strmi	r3, [r6, #0]
 800346e:	6825      	ldr	r5, [r4, #0]
 8003470:	f015 0506 	ands.w	r5, r5, #6
 8003474:	d106      	bne.n	8003484 <_printf_common+0x48>
 8003476:	f104 0a19 	add.w	sl, r4, #25
 800347a:	68e3      	ldr	r3, [r4, #12]
 800347c:	6832      	ldr	r2, [r6, #0]
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	42ab      	cmp	r3, r5
 8003482:	dc2b      	bgt.n	80034dc <_printf_common+0xa0>
 8003484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003488:	1e13      	subs	r3, r2, #0
 800348a:	6822      	ldr	r2, [r4, #0]
 800348c:	bf18      	it	ne
 800348e:	2301      	movne	r3, #1
 8003490:	0692      	lsls	r2, r2, #26
 8003492:	d430      	bmi.n	80034f6 <_printf_common+0xba>
 8003494:	4649      	mov	r1, r9
 8003496:	4638      	mov	r0, r7
 8003498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800349c:	47c0      	blx	r8
 800349e:	3001      	adds	r0, #1
 80034a0:	d023      	beq.n	80034ea <_printf_common+0xae>
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	6922      	ldr	r2, [r4, #16]
 80034a6:	f003 0306 	and.w	r3, r3, #6
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	bf14      	ite	ne
 80034ae:	2500      	movne	r5, #0
 80034b0:	6833      	ldreq	r3, [r6, #0]
 80034b2:	f04f 0600 	mov.w	r6, #0
 80034b6:	bf08      	it	eq
 80034b8:	68e5      	ldreq	r5, [r4, #12]
 80034ba:	f104 041a 	add.w	r4, r4, #26
 80034be:	bf08      	it	eq
 80034c0:	1aed      	subeq	r5, r5, r3
 80034c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034c6:	bf08      	it	eq
 80034c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034cc:	4293      	cmp	r3, r2
 80034ce:	bfc4      	itt	gt
 80034d0:	1a9b      	subgt	r3, r3, r2
 80034d2:	18ed      	addgt	r5, r5, r3
 80034d4:	42b5      	cmp	r5, r6
 80034d6:	d11a      	bne.n	800350e <_printf_common+0xd2>
 80034d8:	2000      	movs	r0, #0
 80034da:	e008      	b.n	80034ee <_printf_common+0xb2>
 80034dc:	2301      	movs	r3, #1
 80034de:	4652      	mov	r2, sl
 80034e0:	4649      	mov	r1, r9
 80034e2:	4638      	mov	r0, r7
 80034e4:	47c0      	blx	r8
 80034e6:	3001      	adds	r0, #1
 80034e8:	d103      	bne.n	80034f2 <_printf_common+0xb6>
 80034ea:	f04f 30ff 	mov.w	r0, #4294967295
 80034ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f2:	3501      	adds	r5, #1
 80034f4:	e7c1      	b.n	800347a <_printf_common+0x3e>
 80034f6:	2030      	movs	r0, #48	; 0x30
 80034f8:	18e1      	adds	r1, r4, r3
 80034fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003504:	4422      	add	r2, r4
 8003506:	3302      	adds	r3, #2
 8003508:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800350c:	e7c2      	b.n	8003494 <_printf_common+0x58>
 800350e:	2301      	movs	r3, #1
 8003510:	4622      	mov	r2, r4
 8003512:	4649      	mov	r1, r9
 8003514:	4638      	mov	r0, r7
 8003516:	47c0      	blx	r8
 8003518:	3001      	adds	r0, #1
 800351a:	d0e6      	beq.n	80034ea <_printf_common+0xae>
 800351c:	3601      	adds	r6, #1
 800351e:	e7d9      	b.n	80034d4 <_printf_common+0x98>

08003520 <_printf_i>:
 8003520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003524:	7e0f      	ldrb	r7, [r1, #24]
 8003526:	4691      	mov	r9, r2
 8003528:	2f78      	cmp	r7, #120	; 0x78
 800352a:	4680      	mov	r8, r0
 800352c:	460c      	mov	r4, r1
 800352e:	469a      	mov	sl, r3
 8003530:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003532:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003536:	d807      	bhi.n	8003548 <_printf_i+0x28>
 8003538:	2f62      	cmp	r7, #98	; 0x62
 800353a:	d80a      	bhi.n	8003552 <_printf_i+0x32>
 800353c:	2f00      	cmp	r7, #0
 800353e:	f000 80d5 	beq.w	80036ec <_printf_i+0x1cc>
 8003542:	2f58      	cmp	r7, #88	; 0x58
 8003544:	f000 80c1 	beq.w	80036ca <_printf_i+0x1aa>
 8003548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800354c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003550:	e03a      	b.n	80035c8 <_printf_i+0xa8>
 8003552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003556:	2b15      	cmp	r3, #21
 8003558:	d8f6      	bhi.n	8003548 <_printf_i+0x28>
 800355a:	a101      	add	r1, pc, #4	; (adr r1, 8003560 <_printf_i+0x40>)
 800355c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003560:	080035b9 	.word	0x080035b9
 8003564:	080035cd 	.word	0x080035cd
 8003568:	08003549 	.word	0x08003549
 800356c:	08003549 	.word	0x08003549
 8003570:	08003549 	.word	0x08003549
 8003574:	08003549 	.word	0x08003549
 8003578:	080035cd 	.word	0x080035cd
 800357c:	08003549 	.word	0x08003549
 8003580:	08003549 	.word	0x08003549
 8003584:	08003549 	.word	0x08003549
 8003588:	08003549 	.word	0x08003549
 800358c:	080036d3 	.word	0x080036d3
 8003590:	080035f9 	.word	0x080035f9
 8003594:	0800368d 	.word	0x0800368d
 8003598:	08003549 	.word	0x08003549
 800359c:	08003549 	.word	0x08003549
 80035a0:	080036f5 	.word	0x080036f5
 80035a4:	08003549 	.word	0x08003549
 80035a8:	080035f9 	.word	0x080035f9
 80035ac:	08003549 	.word	0x08003549
 80035b0:	08003549 	.word	0x08003549
 80035b4:	08003695 	.word	0x08003695
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	1d1a      	adds	r2, r3, #4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	602a      	str	r2, [r5, #0]
 80035c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0a0      	b.n	800370e <_printf_i+0x1ee>
 80035cc:	6820      	ldr	r0, [r4, #0]
 80035ce:	682b      	ldr	r3, [r5, #0]
 80035d0:	0607      	lsls	r7, r0, #24
 80035d2:	f103 0104 	add.w	r1, r3, #4
 80035d6:	6029      	str	r1, [r5, #0]
 80035d8:	d501      	bpl.n	80035de <_printf_i+0xbe>
 80035da:	681e      	ldr	r6, [r3, #0]
 80035dc:	e003      	b.n	80035e6 <_printf_i+0xc6>
 80035de:	0646      	lsls	r6, r0, #25
 80035e0:	d5fb      	bpl.n	80035da <_printf_i+0xba>
 80035e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80035e6:	2e00      	cmp	r6, #0
 80035e8:	da03      	bge.n	80035f2 <_printf_i+0xd2>
 80035ea:	232d      	movs	r3, #45	; 0x2d
 80035ec:	4276      	negs	r6, r6
 80035ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035f2:	230a      	movs	r3, #10
 80035f4:	4859      	ldr	r0, [pc, #356]	; (800375c <_printf_i+0x23c>)
 80035f6:	e012      	b.n	800361e <_printf_i+0xfe>
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	6820      	ldr	r0, [r4, #0]
 80035fc:	1d19      	adds	r1, r3, #4
 80035fe:	6029      	str	r1, [r5, #0]
 8003600:	0605      	lsls	r5, r0, #24
 8003602:	d501      	bpl.n	8003608 <_printf_i+0xe8>
 8003604:	681e      	ldr	r6, [r3, #0]
 8003606:	e002      	b.n	800360e <_printf_i+0xee>
 8003608:	0641      	lsls	r1, r0, #25
 800360a:	d5fb      	bpl.n	8003604 <_printf_i+0xe4>
 800360c:	881e      	ldrh	r6, [r3, #0]
 800360e:	2f6f      	cmp	r7, #111	; 0x6f
 8003610:	bf0c      	ite	eq
 8003612:	2308      	moveq	r3, #8
 8003614:	230a      	movne	r3, #10
 8003616:	4851      	ldr	r0, [pc, #324]	; (800375c <_printf_i+0x23c>)
 8003618:	2100      	movs	r1, #0
 800361a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800361e:	6865      	ldr	r5, [r4, #4]
 8003620:	2d00      	cmp	r5, #0
 8003622:	bfa8      	it	ge
 8003624:	6821      	ldrge	r1, [r4, #0]
 8003626:	60a5      	str	r5, [r4, #8]
 8003628:	bfa4      	itt	ge
 800362a:	f021 0104 	bicge.w	r1, r1, #4
 800362e:	6021      	strge	r1, [r4, #0]
 8003630:	b90e      	cbnz	r6, 8003636 <_printf_i+0x116>
 8003632:	2d00      	cmp	r5, #0
 8003634:	d04b      	beq.n	80036ce <_printf_i+0x1ae>
 8003636:	4615      	mov	r5, r2
 8003638:	fbb6 f1f3 	udiv	r1, r6, r3
 800363c:	fb03 6711 	mls	r7, r3, r1, r6
 8003640:	5dc7      	ldrb	r7, [r0, r7]
 8003642:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003646:	4637      	mov	r7, r6
 8003648:	42bb      	cmp	r3, r7
 800364a:	460e      	mov	r6, r1
 800364c:	d9f4      	bls.n	8003638 <_printf_i+0x118>
 800364e:	2b08      	cmp	r3, #8
 8003650:	d10b      	bne.n	800366a <_printf_i+0x14a>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	07de      	lsls	r6, r3, #31
 8003656:	d508      	bpl.n	800366a <_printf_i+0x14a>
 8003658:	6923      	ldr	r3, [r4, #16]
 800365a:	6861      	ldr	r1, [r4, #4]
 800365c:	4299      	cmp	r1, r3
 800365e:	bfde      	ittt	le
 8003660:	2330      	movle	r3, #48	; 0x30
 8003662:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003666:	f105 35ff 	addle.w	r5, r5, #4294967295
 800366a:	1b52      	subs	r2, r2, r5
 800366c:	6122      	str	r2, [r4, #16]
 800366e:	464b      	mov	r3, r9
 8003670:	4621      	mov	r1, r4
 8003672:	4640      	mov	r0, r8
 8003674:	f8cd a000 	str.w	sl, [sp]
 8003678:	aa03      	add	r2, sp, #12
 800367a:	f7ff fedf 	bl	800343c <_printf_common>
 800367e:	3001      	adds	r0, #1
 8003680:	d14a      	bne.n	8003718 <_printf_i+0x1f8>
 8003682:	f04f 30ff 	mov.w	r0, #4294967295
 8003686:	b004      	add	sp, #16
 8003688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	f043 0320 	orr.w	r3, r3, #32
 8003692:	6023      	str	r3, [r4, #0]
 8003694:	2778      	movs	r7, #120	; 0x78
 8003696:	4832      	ldr	r0, [pc, #200]	; (8003760 <_printf_i+0x240>)
 8003698:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	6829      	ldr	r1, [r5, #0]
 80036a0:	061f      	lsls	r7, r3, #24
 80036a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80036a6:	d402      	bmi.n	80036ae <_printf_i+0x18e>
 80036a8:	065f      	lsls	r7, r3, #25
 80036aa:	bf48      	it	mi
 80036ac:	b2b6      	uxthmi	r6, r6
 80036ae:	07df      	lsls	r7, r3, #31
 80036b0:	bf48      	it	mi
 80036b2:	f043 0320 	orrmi.w	r3, r3, #32
 80036b6:	6029      	str	r1, [r5, #0]
 80036b8:	bf48      	it	mi
 80036ba:	6023      	strmi	r3, [r4, #0]
 80036bc:	b91e      	cbnz	r6, 80036c6 <_printf_i+0x1a6>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	f023 0320 	bic.w	r3, r3, #32
 80036c4:	6023      	str	r3, [r4, #0]
 80036c6:	2310      	movs	r3, #16
 80036c8:	e7a6      	b.n	8003618 <_printf_i+0xf8>
 80036ca:	4824      	ldr	r0, [pc, #144]	; (800375c <_printf_i+0x23c>)
 80036cc:	e7e4      	b.n	8003698 <_printf_i+0x178>
 80036ce:	4615      	mov	r5, r2
 80036d0:	e7bd      	b.n	800364e <_printf_i+0x12e>
 80036d2:	682b      	ldr	r3, [r5, #0]
 80036d4:	6826      	ldr	r6, [r4, #0]
 80036d6:	1d18      	adds	r0, r3, #4
 80036d8:	6961      	ldr	r1, [r4, #20]
 80036da:	6028      	str	r0, [r5, #0]
 80036dc:	0635      	lsls	r5, r6, #24
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	d501      	bpl.n	80036e6 <_printf_i+0x1c6>
 80036e2:	6019      	str	r1, [r3, #0]
 80036e4:	e002      	b.n	80036ec <_printf_i+0x1cc>
 80036e6:	0670      	lsls	r0, r6, #25
 80036e8:	d5fb      	bpl.n	80036e2 <_printf_i+0x1c2>
 80036ea:	8019      	strh	r1, [r3, #0]
 80036ec:	2300      	movs	r3, #0
 80036ee:	4615      	mov	r5, r2
 80036f0:	6123      	str	r3, [r4, #16]
 80036f2:	e7bc      	b.n	800366e <_printf_i+0x14e>
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	2100      	movs	r1, #0
 80036f8:	1d1a      	adds	r2, r3, #4
 80036fa:	602a      	str	r2, [r5, #0]
 80036fc:	681d      	ldr	r5, [r3, #0]
 80036fe:	6862      	ldr	r2, [r4, #4]
 8003700:	4628      	mov	r0, r5
 8003702:	f000 f859 	bl	80037b8 <memchr>
 8003706:	b108      	cbz	r0, 800370c <_printf_i+0x1ec>
 8003708:	1b40      	subs	r0, r0, r5
 800370a:	6060      	str	r0, [r4, #4]
 800370c:	6863      	ldr	r3, [r4, #4]
 800370e:	6123      	str	r3, [r4, #16]
 8003710:	2300      	movs	r3, #0
 8003712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003716:	e7aa      	b.n	800366e <_printf_i+0x14e>
 8003718:	462a      	mov	r2, r5
 800371a:	4649      	mov	r1, r9
 800371c:	4640      	mov	r0, r8
 800371e:	6923      	ldr	r3, [r4, #16]
 8003720:	47d0      	blx	sl
 8003722:	3001      	adds	r0, #1
 8003724:	d0ad      	beq.n	8003682 <_printf_i+0x162>
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	079b      	lsls	r3, r3, #30
 800372a:	d413      	bmi.n	8003754 <_printf_i+0x234>
 800372c:	68e0      	ldr	r0, [r4, #12]
 800372e:	9b03      	ldr	r3, [sp, #12]
 8003730:	4298      	cmp	r0, r3
 8003732:	bfb8      	it	lt
 8003734:	4618      	movlt	r0, r3
 8003736:	e7a6      	b.n	8003686 <_printf_i+0x166>
 8003738:	2301      	movs	r3, #1
 800373a:	4632      	mov	r2, r6
 800373c:	4649      	mov	r1, r9
 800373e:	4640      	mov	r0, r8
 8003740:	47d0      	blx	sl
 8003742:	3001      	adds	r0, #1
 8003744:	d09d      	beq.n	8003682 <_printf_i+0x162>
 8003746:	3501      	adds	r5, #1
 8003748:	68e3      	ldr	r3, [r4, #12]
 800374a:	9903      	ldr	r1, [sp, #12]
 800374c:	1a5b      	subs	r3, r3, r1
 800374e:	42ab      	cmp	r3, r5
 8003750:	dcf2      	bgt.n	8003738 <_printf_i+0x218>
 8003752:	e7eb      	b.n	800372c <_printf_i+0x20c>
 8003754:	2500      	movs	r5, #0
 8003756:	f104 0619 	add.w	r6, r4, #25
 800375a:	e7f5      	b.n	8003748 <_printf_i+0x228>
 800375c:	08005743 	.word	0x08005743
 8003760:	08005754 	.word	0x08005754

08003764 <memmove>:
 8003764:	4288      	cmp	r0, r1
 8003766:	b510      	push	{r4, lr}
 8003768:	eb01 0402 	add.w	r4, r1, r2
 800376c:	d902      	bls.n	8003774 <memmove+0x10>
 800376e:	4284      	cmp	r4, r0
 8003770:	4623      	mov	r3, r4
 8003772:	d807      	bhi.n	8003784 <memmove+0x20>
 8003774:	1e43      	subs	r3, r0, #1
 8003776:	42a1      	cmp	r1, r4
 8003778:	d008      	beq.n	800378c <memmove+0x28>
 800377a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800377e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003782:	e7f8      	b.n	8003776 <memmove+0x12>
 8003784:	4601      	mov	r1, r0
 8003786:	4402      	add	r2, r0
 8003788:	428a      	cmp	r2, r1
 800378a:	d100      	bne.n	800378e <memmove+0x2a>
 800378c:	bd10      	pop	{r4, pc}
 800378e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003796:	e7f7      	b.n	8003788 <memmove+0x24>

08003798 <_sbrk_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	2300      	movs	r3, #0
 800379c:	4d05      	ldr	r5, [pc, #20]	; (80037b4 <_sbrk_r+0x1c>)
 800379e:	4604      	mov	r4, r0
 80037a0:	4608      	mov	r0, r1
 80037a2:	602b      	str	r3, [r5, #0]
 80037a4:	f7fd fa84 	bl	8000cb0 <_sbrk>
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	d102      	bne.n	80037b2 <_sbrk_r+0x1a>
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	b103      	cbz	r3, 80037b2 <_sbrk_r+0x1a>
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
 80037b4:	200006b4 	.word	0x200006b4

080037b8 <memchr>:
 80037b8:	4603      	mov	r3, r0
 80037ba:	b510      	push	{r4, lr}
 80037bc:	b2c9      	uxtb	r1, r1
 80037be:	4402      	add	r2, r0
 80037c0:	4293      	cmp	r3, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	d101      	bne.n	80037ca <memchr+0x12>
 80037c6:	2000      	movs	r0, #0
 80037c8:	e003      	b.n	80037d2 <memchr+0x1a>
 80037ca:	7804      	ldrb	r4, [r0, #0]
 80037cc:	3301      	adds	r3, #1
 80037ce:	428c      	cmp	r4, r1
 80037d0:	d1f6      	bne.n	80037c0 <memchr+0x8>
 80037d2:	bd10      	pop	{r4, pc}

080037d4 <memcpy>:
 80037d4:	440a      	add	r2, r1
 80037d6:	4291      	cmp	r1, r2
 80037d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80037dc:	d100      	bne.n	80037e0 <memcpy+0xc>
 80037de:	4770      	bx	lr
 80037e0:	b510      	push	{r4, lr}
 80037e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037e6:	4291      	cmp	r1, r2
 80037e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037ec:	d1f9      	bne.n	80037e2 <memcpy+0xe>
 80037ee:	bd10      	pop	{r4, pc}

080037f0 <_realloc_r>:
 80037f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037f4:	4680      	mov	r8, r0
 80037f6:	4614      	mov	r4, r2
 80037f8:	460e      	mov	r6, r1
 80037fa:	b921      	cbnz	r1, 8003806 <_realloc_r+0x16>
 80037fc:	4611      	mov	r1, r2
 80037fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003802:	f7ff bc37 	b.w	8003074 <_malloc_r>
 8003806:	b92a      	cbnz	r2, 8003814 <_realloc_r+0x24>
 8003808:	f7ff fbcc 	bl	8002fa4 <_free_r>
 800380c:	4625      	mov	r5, r4
 800380e:	4628      	mov	r0, r5
 8003810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003814:	f000 f81b 	bl	800384e <_malloc_usable_size_r>
 8003818:	4284      	cmp	r4, r0
 800381a:	4607      	mov	r7, r0
 800381c:	d802      	bhi.n	8003824 <_realloc_r+0x34>
 800381e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003822:	d812      	bhi.n	800384a <_realloc_r+0x5a>
 8003824:	4621      	mov	r1, r4
 8003826:	4640      	mov	r0, r8
 8003828:	f7ff fc24 	bl	8003074 <_malloc_r>
 800382c:	4605      	mov	r5, r0
 800382e:	2800      	cmp	r0, #0
 8003830:	d0ed      	beq.n	800380e <_realloc_r+0x1e>
 8003832:	42bc      	cmp	r4, r7
 8003834:	4622      	mov	r2, r4
 8003836:	4631      	mov	r1, r6
 8003838:	bf28      	it	cs
 800383a:	463a      	movcs	r2, r7
 800383c:	f7ff ffca 	bl	80037d4 <memcpy>
 8003840:	4631      	mov	r1, r6
 8003842:	4640      	mov	r0, r8
 8003844:	f7ff fbae 	bl	8002fa4 <_free_r>
 8003848:	e7e1      	b.n	800380e <_realloc_r+0x1e>
 800384a:	4635      	mov	r5, r6
 800384c:	e7df      	b.n	800380e <_realloc_r+0x1e>

0800384e <_malloc_usable_size_r>:
 800384e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003852:	1f18      	subs	r0, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	bfbc      	itt	lt
 8003858:	580b      	ldrlt	r3, [r1, r0]
 800385a:	18c0      	addlt	r0, r0, r3
 800385c:	4770      	bx	lr
	...

08003860 <_init>:
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	bf00      	nop
 8003864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003866:	bc08      	pop	{r3}
 8003868:	469e      	mov	lr, r3
 800386a:	4770      	bx	lr

0800386c <_fini>:
 800386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386e:	bf00      	nop
 8003870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003872:	bc08      	pop	{r3}
 8003874:	469e      	mov	lr, r3
 8003876:	4770      	bx	lr
